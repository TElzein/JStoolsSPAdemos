<!doctype html>
<html>

<head>
	<meta charset="utf-8">
	<title>Zoom Ranger</title>
	<meta name="viewport" content="width=device-width, initial-scale=1">

	<style>
		.uplot, .uplot *, .uplot *::before, .uplot *::after {box-sizing: border-box;}.uplot {font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";line-height: 1.5;width: max-content;}.u-title {text-align: center;font-size: 18px;font-weight: bold;}.u-wrap {position: relative;user-select: none;}.u-over, .u-under {position: absolute;overflow: hidden;}.uplot canvas {display: block;position: relative;width: 100%;height: 100%;}.u-legend {font-size: 14px;margin: auto;text-align: center;}.u-inline {display: block;}.u-inline * {display: inline-block;}.u-inline tr {margin-right: 16px;}.u-legend th {font-weight: 600;}.u-legend th > * {vertical-align: middle;display: inline-block;}.u-legend .u-marker {width: 1em;height: 1em;margin-right: 4px;border: 2px solid transparent;}.u-inline.u-live th::after {content: ":";vertical-align: middle;}.u-inline:not(.u-live) .u-value {display: none;}.u-series > * {padding: 4px;}.u-series th {cursor: pointer;}.u-legend .u-off > * {opacity: 0.3;}.u-select {background: rgba(0,0,0,0.07);position: absolute;pointer-events: none;}.u-select.u-off {display: none;}.u-cursor-x, .u-cursor-y {position: absolute;left: 0;top: 0;pointer-events: none;will-change: transform;z-index: 100;}.u-cursor-x {height: 100%;border-right: 1px dashed #607D8B;}.u-cursor-y {width: 100%;border-bottom: 1px dashed #607D8B;}.u-cursor-pt {position: absolute;top: 0;left: 0;border-radius: 50%;filter: brightness(85%);pointer-events: none;will-change: transform;z-index: 100;}
		DIV {
			display: inline-block;
		}
		SPAN > DIV {
			padding: 10px;
		}
		SPAN > DIV {
			text-align: center;
		}
		.uplot {
			display: flex;
			flex-flow: column;
			width: 450px;
		}
		.u-legend {
			order: 1;
		}
		.u-wrap {
			order: 2;
		}
	</style>
</head>
<script>
const collection =
{"Virtual Users":[[[1598011015000,1598011016000,1598011017000,1598011018000,1598011019000,1598011020000,1598011021000,1598011022000,1598011023000],[1500,1497,1495,1493,1490,1459,1420,1073,1071],1071,1500,"vus.mean"]],"Requests per Second":[[[1598011016000,1598011017000,1598011018000,1598011019000,1598011020000,1598011021000,1598011022000,1598011023000,1598011024000],[3,2,2,7,27,65,321,10,1063],2,1063,"http_reqs.sum"]],"Errors Per Second":[],"Checks Per Second":[],"http_req_duration":[[1598011016000,2329.2986560666695,"mean"],[1598011020633,5324.2227,"max"],[1598011016000,2033.32845,"median"],[1598011016671,63.9961,"min"],[1598011024335,3097.7254,"p90"],[1598011024037,4169.1861,"p95"],[[1598011016000,1598011017000,1598011018000,1598011019000,1598011020000,1598011021000,1598011022000,1598011023000,1598011024000],[273.1125,154.9983,356.125,3065.6018,5324.2227,2064.5467,2700.104,4126.1821,4504.3871],154.9983,5324.2227,"http_req_duration.max"],[[1598011016000,1598011017000,1598011018000,1598011019000,1598011020000,1598011021000,1598011022000,1598011023000,1598011024000],[273.1125,154.9983,356.125,3065.6018,5040.2257,2033.5475,2219.5913,4126.1821,4172.7161],154.9983,5040.2257,"http_req_duration.p95"],[[1598011016000,1598011017000,1598011018000,1598011019000,1598011020000,1598011021000,1598011022000,1598011023000,1598011024000],[273.1125,154.9983,356.125,2470.4409,4575.7127,1929.5469,2041.5921,4122.1844,3215.244],154.9983,4575.7127,"http_req_duration.p90"],[[1598011016000,1598011017000,1598011018000,1598011019000,1598011020000,1598011021000,1598011022000,1598011023000,1598011024000],[63.9961,99.9983,240.9999,630.9982,307.9975,1156.9921,1424.5579,3207.1925,1799.2639],63.9961,3207.1925,"http_req_duration.min"],[[1598011016037.0007,1598011016671.0007,1598011016813.0017,1598011017340.0037,1598011017461.0034,1598011018094.0007,1598011018655.0076,1598011019203.0076,1598011019223.0076,1598011019836.0007,1598011019861.0078,1598011019862.008,1598011019862.009,1598011019865.0078,1598011020153.0078,1598011020470.008,1598011020471.008,1598011020471.009,1598011020551.008,1598011020551.009,1598011020552.008,1598011020552.009,1598011020552.01,1598011020553.0078,1598011020553.0088,1598011020554.0078,1598011020557.0078,1598011020557.0088,1598011020589.0078,1598011020604.008,1598011020632.008,1598011020633.0078,1598011020655.0007,1598011020676.0007,1598011020760.008,1598011020783.008,1598011020809.0078,1598011020810.0007,1598011020835.008,1598011020838.008,1598011020871.008,1598011021002.0078,1598011021049.0078,1598011021099.008,1598011021151.0083,1598011021208.0083,1598011021238.0083,1598011021427.0034,1598011021447.0034,1598011021447.0044,1598011021451.0034,1598011021506.0032,1598011021507.0034,1598011021507.0044,1598011021508.0034,1598011021508.0044,1598011021554.0002,1598011021575.0034,1598011021584.0034,1598011021584.0044,1598011021692.0034,1598011021768.0002,1598011021784.0034,1598011021785.0032,1598011021790.0034,1598011021790.0044,1598011021790.0056,1598011021791.0034,1598011021791.0044,1598011021795.0034,1598011021825.0032,1598011021825.0044,1598011021825.0054,1598011021826.0032,1598011021826.0042,1598011021826.0051,1598011021827.0002,1598011021827.0015,1598011021872.0034,1598011021872.0044,1598011021924.0034,1598011021924.0044,1598011021925.0032,1598011021925.0044,1598011021925.0054,1598011021927.0034,1598011021928.0034,1598011021928.0044,1598011021928.0054,1598011021928.0063,1598011021928.0073,1598011021932.0034,1598011021933.0032,1598011021933.0044,1598011021934.0034,1598011021944.0034,1598011021945.0002,1598011021945.0012,1598011021945.0022,1598011021945.0032,1598011021945.0044,1598011021954.0032,1598011021980.0034,1598011021980.0044,1598011021980.0054,1598011021980.0063,1598011022054.0034,1598011022054.0044,1598011022054.0056,1598011022055.0034,1598011022081.0032,1598011022081.0044,1598011022082.0032,1598011022100.0034,1598011022100.0044,1598011022100.0054,1598011022101.0032,1598011022101.0044,1598011022101.0054,1598011022101.0063,1598011022102.0034,1598011022106.0032,1598011022106.0042,1598011022112.0034,1598011022112.0044,1598011022126.0034,1598011022250.0037,1598011022250.0046,1598011022251.004,1598011022251.005,1598011022263.004,1598011022263.005,1598011022264.004,1598011022264.005,1598011022264.0059,1598011022264.0068,1598011022268.004,1598011022268.005,1598011022268.0059,1598011022268.0068,1598011022268.008,1598011022268.009,1598011022268.01,1598011022274.0037,1598011022287.004,1598011022318.004,1598011022318.005,1598011022319.004,1598011022320.004,1598011022320.005,1598011022323.004,1598011022324.004,1598011022325.0037,1598011022325.005,1598011022325.0059,1598011022326.004,1598011022331.004,1598011022331.005,1598011022332.004,1598011022333.0037,1598011022334.004,1598011022334.005,1598011022335.004,1598011022335.005,1598011022335.0059,1598011022340.004,1598011022341.0037,1598011022341.005,1598011022342.004,1598011022344.004,1598011022345.0037,1598011022358.004,1598011022358.005,1598011022359.004,1598011022360.004,1598011022367.004,1598011022367.005,1598011022457.0088,1598011022457.01,1598011022487.009,1598011022491.009,1598011022491.01,1598011022491.011,1598011022502.009,1598011022504.009,1598011022504.01,1598011022504.011,1598011022504.012,1598011022504.013,1598011022504.0142,1598011022504.0151,1598011022505.0088,1598011022505.01,1598011022505.011,1598011022505.012,1598011022506.0088,1598011022506.0098,1598011022506.011,1598011022506.012,1598011022506.013,1598011022507.009,1598011022507.01,1598011022507.011,1598011022507.0122,1598011022508.009,1598011022508.01,1598011022508.011,1598011022508.012,1598011022508.013,1598011022508.0142,1598011022509.0088,1598011022509.01,1598011022509.011,1598011022509.012,1598011022509.013,1598011022509.014,1598011022510.009,1598011022510.01,1598011022510.0112,1598011022510.0122,1598011022510.0132,1598011022510.0142,1598011022510.0151,1598011022510.0164,1598011022511.009,1598011022511.01,1598011022511.011,1598011022511.0122,1598011022511.0132,1598011022511.0142,1598011022511.0151,1598011022511.016,1598011022512.001,1598011022512.002,1598011022512.0032,1598011022512.0042,1598011022512.0051,1598011022512.006,1598011022512.007,1598011022513.0088,1598011022513.01,1598011022513.011,1598011022513.012,1598011022513.013,1598011022513.014,1598011022513.0151,1598011022513.016,1598011022513.017,1598011022513.018,1598011022514.0088,1598011022514.0098,1598011022514.011,1598011022514.012,1598011022514.013,1598011022514.014,1598011022514.015,1598011022515.009,1598011022515.01,1598011022515.011,1598011022515.0122,1598011022515.0132,1598011022515.0142,1598011022515.0151,1598011022515.016,1598011022515.0173,1598011022515.0183,1598011022516.009,1598011022516.01,1598011022516.011,1598011022516.012,1598011022516.013,1598011022516.0142,1598011022516.0151,1598011022516.016,1598011022517.0088,1598011022517.01,1598011022517.011,1598011022517.012,1598011022517.013,1598011022517.014,1598011022517.0151,1598011022517.016,1598011022517.017,1598011022518.009,1598011022518.01,1598011022518.0112,1598011022518.0122,1598011022518.0132,1598011022518.0142,1598011022518.0151,1598011022519.009,1598011022519.01,1598011022519.011,1598011022519.0122,1598011022519.0132,1598011022519.0142,1598011022519.0151,1598011022519.016,1598011022519.0173,1598011022520.009,1598011022520.01,1598011022520.011,1598011022520.012,1598011022520.013,1598011022520.0142,1598011022520.0151,1598011022520.016,1598011022521.0088,1598011022521.01,1598011022521.011,1598011022521.012,1598011022521.013,1598011022521.014,1598011022521.0151,1598011022521.016,1598011022522.0088,1598011022522.0098,1598011022522.011,1598011022522.012,1598011022522.013,1598011022522.014,1598011022522.015,1598011022522.016,1598011022522.017,1598011022523.001,1598011022523.0022,1598011022523.0032,1598011022523.0042,1598011022523.0051,1598011022523.006,1598011022523.0073,1598011022523.0083,1598011022523.0093,1598011022524.009,1598011022524.01,1598011022524.011,1598011022524.012,1598011022524.013,1598011022524.0142,1598011022524.0151,1598011022524.016,1598011022524.017,1598011022525.0088,1598011022525.01,1598011022525.011,1598011022525.012,1598011022525.013,1598011022525.014,1598011022525.0151,1598011022526.009,1598011022526.01,1598011022526.0112,1598011022526.0122,1598011022526.0132,1598011022526.0142,1598011022526.0151,1598011022527.009,1598011022527.01,1598011022527.011,1598011022527.0122,1598011022527.0132,1598011022528.009,1598011022528.01,1598011022529.0068,1598011022529.0088,1598011022529.01,1598011022529.011,1598011022529.012,1598011022529.013,1598011022529.014,1598011022530.0088,1598011022530.0098,1598011022530.011,1598011022530.012,1598011022530.013,1598011022530.014,1598011022531.009,1598011022531.01,1598011022531.011,1598011022531.0122,1598011022531.0132,1598011022531.0142,1598011022531.0151,1598011022531.016,1598011022532.009,1598011022532.01,1598011022532.011,1598011022532.012,1598011022532.013,1598011022532.0142,1598011022532.0151,1598011022532.016,1598011022533.0088,1598011022533.01,1598011022533.011,1598011022533.012,1598011022533.013,1598011022533.014,1598011022533.0151,1598011022534.0012,1598011022534.0022,1598011022534.0032,1598011022534.0042,1598011022535.009,1598011022535.01,1598011022535.011,1598011022535.0122,1598011022535.0132,1598011022535.0142,1598011022535.0151,1598011022536.0007,1598011022536.0017,1598011022536.003,1598011022536.004,1598011022536.005,1598011022536.0059,1598011022536.0068,1598011022537.0088,1598011022537.01,1598011022537.011,1598011022537.012,1598011022537.013,1598011022538.0088,1598011022538.0098,1598011022538.011,1598011022555.009,1598011022555.01,1598011023824.0098,1598011023844.0098,1598011023855.0098,1598011023960.0098,1598011023964.0098,1598011023964.0107,1598011023965.0098,1598011023965.0107,1598011023965.0117,1598011023979.0098,1598011024033.0098,1598011024033.0107,1598011024034.0095,1598011024034.0107,1598011024034.0117,1598011024034.0127,1598011024034.0137,1598011024035.0098,1598011024035.0107,1598011024035.0117,1598011024035.013,1598011024035.014,1598011024035.015,1598011024035.0159,1598011024035.0168,1598011024035.018,1598011024036.0098,1598011024036.0107,1598011024036.0117,1598011024036.0127,1598011024036.014,1598011024036.015,1598011024036.0159,1598011024036.0168,1598011024036.0178,1598011024037.0098,1598011024037.0107,1598011024037.0117,1598011024037.0127,1598011024037.0137,1598011024037.015,1598011024037.0159,1598011024037.0168,1598011024038.0098,1598011024038.011,1598011024038.012,1598011024039.0054,1598011024039.0063,1598011024039.0076,1598011024039.0085,1598011024039.0095,1598011024039.0105,1598011024039.0115,1598011024039.0127,1598011024040.0051,1598011024040.006,1598011024040.007,1598011024040.0083,1598011024040.0093,1598011024040.0103,1598011024040.0112,1598011024040.0122,1598011024040.0134,1598011024041.0051,1598011024041.006,1598011024041.007,1598011024041.008,1598011024041.009,1598011024041.0103,1598011024041.0112,1598011024042.005,1598011024042.006,1598011024042.007,1598011024042.008,1598011024042.009,1598011024043.0051,1598011024043.006,1598011024043.0073,1598011024043.0083,1598011024043.0093,1598011024043.0103,1598011024043.0112,1598011024043.0125,1598011024043.0134,1598011024044.0051,1598011024044.006,1598011024044.007,1598011024044.0083,1598011024044.0093,1598011024044.0103,1598011024044.0112,1598011024044.0122,1598011024044.0134,1598011024044.0144,1598011024044.0154,1598011024044.0164,1598011024044.0173,1598011024044.0183,1598011024044.0195,1598011024044.0205,1598011024044.0215,1598011024045.0051,1598011024045.006,1598011024045.007,1598011024045.008,1598011024045.009,1598011024045.0103,1598011024045.0112,1598011024045.0122,1598011024047.0051,1598011024048.0005,1598011024048.0015,1598011024048.0024,1598011024048.0037,1598011024048.0046,1598011024048.0056,1598011024048.0066,1598011024049.0002,1598011024049.0012,1598011024049.0022,1598011024049.0032,1598011024049.0044,1598011024049.0054,1598011024049.0063,1598011024049.0073,1598011024049.0083,1598011024049.0095,1598011024050.0002,1598011024050.0012,1598011024050.0022,1598011024050.0032,1598011024050.0042,1598011024050.0051,1598011024050.0063,1598011024050.0073,1598011024050.0083,1598011024050.0093,1598011024050.0103,1598011024050.0115,1598011024050.0125,1598011024050.0134,1598011024050.0144,1598011024051,1598011024051.001,1598011024051.0022,1598011024051.0032,1598011024051.0042,1598011024051.0051,1598011024051.006,1598011024334.0056,1598011024334.0066,1598011024334.0076,1598011024334.0085,1598011024334.0095,1598011024335.0005,1598011024335.0017,1598011024335.0027,1598011024335.0037,1598011024335.0046,1598011024335.0056,1598011024335.0068,1598011024335.0078,1598011024335.0088,1598011024335.0098,1598011024335.0107,1598011024335.0117,1598011024335.013,1598011024335.014,1598011024336.0054,1598011024336.0063,1598011024336.0073,1598011024336.0085,1598011024336.0095,1598011024336.0105,1598011024336.0115,1598011024336.0125,1598011024337.0007,1598011024337.0017,1598011024337.0027,1598011024337.0037,1598011024337.005,1598011024337.0059,1598011024337.0068,1598011024337.0063,1598011024337.0073,1598011024337.0083,1598011024337.0095,1598011024337.0105,1598011024337.0115,1598011024337.0125,1598011024338.0015,1598011024338.0017,1598011024338.0027,1598011024338.0037,1598011024338.0046,1598011024338.0059,1598011024338.0068,1598011024338.0078,1598011024338.0088,1598011024338.0098,1598011024338.011,1598011024338.012,1598011024338.013,1598011024338.014,1598011024338.015,1598011024339.0017,1598011024339.0027,1598011024339.0037,1598011024339.0046,1598011024339.0056,1598011024339.0068,1598011024339.0078,1598011024339.0088,1598011024340.0015,1598011024340.0024,1598011024340.0037,1598011024340.0046,1598011024340.0056,1598011024340.0066,1598011024340.0076,1598011024340.0088,1598011024340.0098,1598011024340.0107,1598011024340.0117,1598011024340.0127,1598011024340.014,1598011024340.015,1598011024340.0159,1598011024341.0015,1598011024341.0024,1598011024341.0034,1598011024341.0046,1598011024341.0056,1598011024341.0066,1598011024341.0076,1598011024341.0085,1598011024341.0098,1598011024341.0107,1598011024341.0117,1598011024341.0127,1598011024341.0137,1598011024341.015,1598011024341.0159,1598011024341.0168,1598011024341.0178,1598011024341.0188,1598011024341.02,1598011024341.021,1598011024342.0017,1598011024342.0027,1598011024342.0037,1598011024342.0046,1598011024342.0059,1598011024342.0068,1598011024342.0078,1598011024342.0088,1598011024342.0098,1598011024342.011,1598011024342.012,1598011024342.013,1598011024342.014,1598011024342.015,1598011024342.016,1598011024342.017,1598011024342.018,1598011024342.019,1598011024342.02,1598011024342.0212,1598011024342.0222,1598011024343.0017,1598011024343.0027,1598011024343.0037,1598011024343.0046,1598011024343.0056,1598011024343.0068,1598011024343.0078,1598011024343.0088,1598011024343.0098,1598011024343.0107,1598011024343.0117,1598011024343.013,1598011024343.014,1598011024343.015,1598011024343.0159,1598011024343.0168,1598011024343.018,1598011024343.019,1598011024343.02,1598011024343.021,1598011024343.022,1598011024344.0015,1598011024344.0024,1598011024344.0037,1598011024344.0046,1598011024344.0056,1598011024344.0066,1598011024344.0076,1598011024344.0088,1598011024344.0098,1598011024344.0107,1598011024344.0117,1598011024344.0127,1598011024344.014,1598011024344.015,1598011024344.0159,1598011024344.0168,1598011024344.0178,1598011024344.019,1598011024344.02,1598011024344.021,1598011024344.022,1598011024344.023,1598011024345.0015,1598011024345.0024,1598011024345.0034,1598011024345.0046,1598011024345.0056,1598011024345.0066,1598011024345.0076,1598011024345.0085,1598011024345.0098,1598011024345.0107,1598011024345.0117,1598011024345.0127,1598011024345.0137,1598011024345.015,1598011024345.0159,1598011024345.0168,1598011024345.0178,1598011024345.0188,1598011024345.02,1598011024345.021,1598011024345.022,1598011024346.0017,1598011024346.0027,1598011024346.0037,1598011024346.0046,1598011024346.0059,1598011024346.0068,1598011024346.0078,1598011024346.0088,1598011024346.0098,1598011024346.011,1598011024346.012,1598011024346.013,1598011024346.014,1598011024346.015,1598011024346.016,1598011024346.017,1598011024346.018,1598011024350.0017,1598011024350.0027,1598011024350.0037,1598011024350.0046,1598011024350.0059,1598011024350.0068,1598011024350.0078,1598011024350.0088,1598011024350.0098,1598011024350.011,1598011024351.0002,1598011024351.0015,1598011024351.0024,1598011024351.0034,1598011024351.0044,1598011024351.0054,1598011024351.0063,1598011024351.0076,1598011024351.0085,1598011024351.0095,1598011024351.0105,1598011024351.0115,1598011024351.0127,1598011024351.0137,1598011024351.0146,1598011024352.0015,1598011024352.0024,1598011024352.0037,1598011024352.0046,1598011024352.0056,1598011024352.0066,1598011024352.0076,1598011024352.0088,1598011024352.0098,1598011024352.0107,1598011024352.0117,1598011024352.0127,1598011024352.014,1598011024352.015,1598011024352.0159,1598011024352.0168,1598011024353.0015,1598011024353.0024,1598011024353.0034,1598011024353.0046,1598011024353.0056,1598011024353.0066,1598011024353.0076,1598011024353.0085,1598011024353.0098,1598011024353.0107,1598011024353.0117,1598011024353.0127,1598011024353.0137,1598011024353.015,1598011024355.0017,1598011024355.0027,1598011024355.0037,1598011024355.0046,1598011024355.0056,1598011024355.0068,1598011024355.0078,1598011024355.0088,1598011024355.0098,1598011024356.0015,1598011024356.0024,1598011024356.0037,1598011024356.0046,1598011024356.0056,1598011024356.0066,1598011024356.0076,1598011024356.0088,1598011024356.0098,1598011024356.0107,1598011024357.0002,1598011024361,1598011024361.001,1598011024361.002,1598011024362.0015,1598011024362.0024,1598011024362.0034,1598011024362.0044,1598011024362.0056,1598011024362.0066,1598011024362.0076,1598011024362.0085,1598011024362.0095,1598011024363.0017,1598011024363.0027,1598011024363.0037,1598011024363.0046,1598011024363.0056,1598011024363.0068,1598011024363.0078,1598011024363.0088,1598011024363.0098,1598011024363.0107,1598011024363.0117,1598011024363.013,1598011024364.0015,1598011024364.0024,1598011024364.0037,1598011024364.0046,1598011024364.0056,1598011024364.0066,1598011024364.0076,1598011024364.0088,1598011024364.0098,1598011024364.0107,1598011024365,1598011024365.001,1598011024365.002,1598011024365.003,1598011024365.0042,1598011024365.0051,1598011024366.0017,1598011024366.0027,1598011024366.0037,1598011024366.0046,1598011024366.0059,1598011024366.0068,1598011024366.0078,1598011024366.0088,1598011024366.0098,1598011024366.011,1598011024366.012,1598011024366.013,1598011024367.0017,1598011024367.0027,1598011024367.0037,1598011024367.0046,1598011024367.0056,1598011024367.0068,1598011024367.0078,1598011024367.0088,1598011024367.0098,1598011024367.0107,1598011024367.0117,1598011024367.013,1598011024367.014,1598011024367.015,1598011024367.0159,1598011024367.0168,1598011024368.0015,1598011024368.0024,1598011024368.0037,1598011024368.0046,1598011024368.0056,1598011024368.0066,1598011024368.0076,1598011024368.0088,1598011024368.0098,1598011024368.0107,1598011024368.0117,1598011024368.0127,1598011024368.014,1598011024368.015,1598011024368.0159,1598011024368.0168,1598011024368.0178,1598011024369.0015,1598011024369.0032,1598011024369.0044,1598011024369.0054,1598011024369.0063,1598011024369.0073,1598011024369.0083,1598011024369.0095,1598011024369.0105,1598011024369.0115,1598011024369.0125,1598011024369.0134,1598011024369.0146,1598011024369.0156,1598011024369.0166,1598011024370.0015,1598011024370.0024,1598011024370.0034,1598011024370.0044,1598011024370.0056,1598011024370.0066,1598011024370.0076,1598011024370.0085,1598011024370.0095,1598011024370.0107,1598011024370.0117,1598011024370.0127,1598011024370.0137,1598011024370.0146,1598011024370.0156,1598011024370.0168,1598011024371.0017,1598011024371.0027,1598011024371.0037,1598011024371.0046,1598011024371.0056,1598011024371.0068,1598011024371.0078,1598011024371.0088,1598011024371.0098,1598011024371.0107,1598011024371.0117,1598011024371.013,1598011024371.014,1598011024371.015,1598011024371.0159,1598011024371.0168,1598011024371.018,1598011024371.019,1598011024371.02,1598011024371.021,1598011024371.022,1598011024371.0232,1598011024371.0242,1598011024371.0251,1598011024371.0261,1598011024371.027,1598011024371.0283,1598011024372.0015,1598011024372.0024,1598011024372.0037,1598011024372.0046,1598011024372.0056,1598011024372.0066,1598011024372.0076,1598011024372.0088,1598011024372.0098,1598011024372.0107,1598011024372.0117,1598011024372.0127,1598011024372.014,1598011024372.015,1598011024372.0159,1598011024372.0168,1598011024372.0178,1598011024372.019,1598011024372.02,1598011024372.021,1598011024372.022,1598011024372.023,1598011024372.0242,1598011024372.0251,1598011024372.0261,1598011024372.027,1598011024372.028,1598011024372.0293,1598011024372.0303,1598011024373.0015,1598011024373.0024,1598011024373.0034,1598011024373.0046,1598011024373.0056,1598011024373.0066,1598011024373.0076,1598011024373.0085,1598011024373.0098,1598011024373.0107,1598011024373.0117,1598011024373.0127,1598011024373.0137,1598011024373.015,1598011024373.0159,1598011024373.0168,1598011024373.0178,1598011024373.0188,1598011024373.02,1598011024373.021,1598011024373.022,1598011024373.023,1598011024373.024,1598011024373.025,1598011024373.0261,1598011024373.027,1598011024374.0017,1598011024374.0027,1598011024374.0037,1598011024374.0046,1598011024374.0059,1598011024374.0068,1598011024374.0078,1598011024374.0088,1598011024374.0098,1598011024374.011,1598011024374.012,1598011024374.013,1598011024374.014,1598011024374.015,1598011024374.016,1598011024374.017,1598011024374.018,1598011024374.019,1598011024374.02,1598011024374.0212,1598011024374.0222,1598011024374.0232,1598011024374.0242,1598011024374.0251,1598011024374.0261,1598011024374.0273,1598011024374.0283,1598011024374.0293,1598011024374.0303,1598011024374.0312,1598011024374.0325,1598011024374.0334,1598011024375.0017,1598011024375.0027,1598011024375.0037,1598011024375.0046,1598011024375.0056,1598011024375.0068,1598011024375.0078,1598011024375.0088,1598011024375.0098,1598011024375.0107,1598011024375.0117,1598011024375.013,1598011024375.014,1598011024375.015,1598011024375.0159,1598011024375.0168,1598011024375.018,1598011024375.019,1598011024375.02,1598011024375.021,1598011024375.022,1598011024375.0232,1598011024375.0242,1598011024375.0251,1598011024375.0261,1598011024375.027,1598011024375.0283,1598011024375.0293,1598011024375.0303,1598011024375.0312,1598011024376.0002,1598011024376.0012,1598011024376.0022,1598011024376.0034,1598011024376.0044,1598011024376.0054,1598011024376.0063,1598011024376.0073,1598011024376.0085,1598011024376.0095,1598011024376.0105,1598011024376.0115,1598011024379.0017,1598011024380.0002,1598011024380.0012,1598011024380.0022,1598011024380.0034,1598011024380.0044,1598011024380.0054,1598011024380.0063,1598011024380.0073,1598011024381.0015,1598011024381.0024,1598011024381.0034,1598011024382.002,1598011024382.003,1598011024382.004,1598011024382.005,1598011024382.006,1598011024382.007,1598011024382.008,1598011024382.009,1598011024382.01,1598011024382.0112,1598011024382.0122,1598011024382.0132,1598011024383.0017,1598011024383.0027,1598011024383.0037,1598011024383.0046,1598011024383.0056,1598011024383.0068,1598011024383.0078,1598011024383.0088,1598011024383.0098,1598011024383.0107,1598011024383.0117,1598011024383.013,1598011024383.014,1598011024383.015,1598011024383.0159,1598011024383.0168,1598011024383.018,1598011024384.0015,1598011024384.0024,1598011024384.0037,1598011024384.0046,1598011024384.0056,1598011024384.0066,1598011024384.0076,1598011024384.0088,1598011024384.0098,1598011024384.0107,1598011024384.0117,1598011024384.0127,1598011024384.014,1598011024384.015,1598011024384.0159,1598011024384.0168,1598011024384.0178,1598011024384.019,1598011024384.02,1598011024384.021,1598011024385.0002,1598011024385.0012,1598011024385.0022,1598011024385.0032,1598011024385.0044,1598011024385.0054,1598011024385.0063,1598011024385.0073,1598011024385.0083,1598011024385.0095,1598011024385.0105,1598011024385.0115,1598011024385.0125,1598011024385.0134,1598011024385.0146,1598011024385.0156,1598011024385.0166,1598011024385.0176,1598011024385.0186,1598011024385.0195,1598011024385.0208,1598011024385.0217,1598011024385.0227,1598011024385.0237,1598011024386.0015,1598011024386.0024,1598011024386.0034,1598011024386.0044,1598011024386.0056,1598011024386.0066,1598011024386.0076,1598011024386.0085,1598011024386.0095,1598011024386.0107,1598011024386.0117,1598011024386.0127,1598011024386.0137,1598011024386.0146,1598011024386.0156,1598011024386.0168,1598011024386.0178,1598011024386.0188,1598011024386.0198,1598011024386.0208,1598011024386.022,1598011024387.0017,1598011024387.0027,1598011024387.0037,1598011024387.0046,1598011024387.0056,1598011024387.0068,1598011024387.0078,1598011024387.0088,1598011024387.0098,1598011024387.0107,1598011024387.0117,1598011024387.013,1598011024387.014,1598011024387.015,1598011024387.0159,1598011024387.0168,1598011024387.018,1598011024387.019,1598011024388.0015,1598011024388.0024,1598011024388.0037,1598011024388.0046,1598011024388.0056,1598011024388.0066,1598011024388.0076,1598011024389.0015,1598011024389.0024,1598011024389.0034,1598011024389.0046,1598011024389.0056,1598011024390.0017,1598011024390.0027,1598011024390.0037,1598011024390.0046,1598011024390.0059,1598011024390.0068,1598011024390.0078,1598011024390.0088,1598011024390.0098,1598011024390.011,1598011024390.012,1598011024390.013,1598011024390.014,1598011024391.0017,1598011024391.0027,1598011024391.0037,1598011024391.0046,1598011024391.0056,1598011024391.0068,1598011024391.0078,1598011024391.0088,1598011024391.0098,1598011024391.0107,1598011024391.0117,1598011024391.013,1598011024391.014,1598011024391.015,1598011024391.0159,1598011024391.0168,1598011024391.018,1598011024391.019,1598011024391.02,1598011024391.021,1598011024391.022,1598011024391.0232,1598011024391.0242,1598011024392,1598011024392.001,1598011024392.002,1598011024392.0032,1598011024392.0042,1598011024392.0051,1598011024392.006,1598011024392.007,1598011024392.0083,1598011024397.0015,1598011024397.0024,1598011024398.0017,1598011024398.0027,1598011024398.0037,1598011024398.0046,1598011024399.0017,1598011024399.0027,1598011024399.0037,1598011024399.0046,1598011024399.0056,1598011024399.0068,1598011024400.0015,1598011024400.0024,1598011024400.0037,1598011024400.0046,1598011024400.0056,1598011024400.0066,1598011024400.0076,1598011024400.0088,1598011024400.0098,1598011024400.0107,1598011024400.0117,1598011024400.0127,1598011024400.014,1598011024400.015,1598011024401.0015,1598011024401.0024,1598011024401.0034,1598011024401.0046,1598011024401.0056,1598011024401.0066,1598011024401.0076,1598011024401.0085,1598011024401.0098,1598011024401.0107,1598011024401.0117,1598011024401.0127,1598011024401.0137,1598011024401.015,1598011024401.0159,1598011024401.0168,1598011024401.0178,1598011024402.0015,1598011024402.0024,1598011024402.0034,1598011024402.0044,1598011024402.0056,1598011024402.0066,1598011024402.0076,1598011024402.0085,1598011024402.0095,1598011024402.0107,1598011024402.0117,1598011024402.0127,1598011024402.0137,1598011024402.0146,1598011024402.0156,1598011024402.0168,1598011024403.0017,1598011024403.0027,1598011024403.0037,1598011024403.0046,1598011024403.0056,1598011024403.0068,1598011024403.0078,1598011024403.0088,1598011024403.0098,1598011024403.0107,1598011024403.0117,1598011024403.013,1598011024403.014,1598011024403.015,1598011024403.0159,1598011024403.0168,1598011024404.0015,1598011024404.0024,1598011024404.0037,1598011024404.0046,1598011024404.0056,1598011024404.0066,1598011024404.0076,1598011024404.0088,1598011024404.0098,1598011024404.0107,1598011024404.0117,1598011024404.0127,1598011024404.014,1598011024404.015,1598011024404.0159,1598011024404.0168,1598011024404.0178,1598011024404.019,1598011024404.02,1598011024405.0015,1598011024405.0024,1598011024405.0034,1598011024405.0046,1598011024405.0056,1598011024405.0066,1598011024405.0076,1598011024405.0085,1598011024405.0098,1598011024405.0107,1598011024405.0117,1598011024405.0127,1598011024405.0137,1598011024405.015,1598011024405.0159,1598011024405.0168,1598011024405.0178,1598011024405.0188,1598011024405.02,1598011024405.021,1598011024406.0017,1598011024406.0027,1598011024406.0037,1598011024406.0046,1598011024406.0059,1598011024406.0068,1598011024406.0078,1598011024406.0088,1598011024406.0098,1598011024406.011,1598011024406.012,1598011024406.013,1598011024406.014,1598011024406.015,1598011024406.016,1598011024406.017,1598011024406.018,1598011024406.019,1598011024406.02,1598011024406.0212,1598011024406.0222,1598011024407.0017,1598011024407.0027,1598011024407.0037,1598011024407.0046,1598011024407.0056,1598011024407.0068,1598011024407.0078,1598011024407.0088,1598011024407.0098,1598011024407.0107,1598011024407.0117,1598011024407.013,1598011024408.0015,1598011024408.0024,1598011024408.0037,1598011024408.0046,1598011024408.0056,1598011024408.0066,1598011024408.0076,1598011024408.0088,1598011024408.0098,1598011024408.0107,1598011024408.0117,1598011024408.0127,1598011024408.014,1598011024408.015,1598011024408.0159,1598011024408.0168,1598011024408.0178,1598011024408.019,1598011024408.02,1598011024408.021,1598011024409.0015,1598011024409.0024,1598011024409.0034,1598011024409.0046,1598011024409.0056,1598011024409.0066,1598011024409.0076,1598011024409.0085,1598011024409.0098,1598011024409.0107,1598011024409.0117,1598011024409.0127,1598011024409.0137,1598011024409.015,1598011024409.0159,1598011024409.0168,1598011024409.0178,1598011024409.0188,1598011024409.02,1598011024409.021,1598011024410.0015,1598011024410.0024,1598011024410.0034,1598011024410.0044,1598011024410.0056,1598011024410.0066,1598011024413.0015,1598011024416.0017],[67.9997,63.9961,273.1125,99.9983,154.9983,356.125,240.9999,630.9982,635.9971,3065.6018,2469.4414,2444.4388,2470.4409,2361.4437,307.9975,608.9943,610.9948,609.9948,656.9858,656.9858,607.9981,606.9992,606.9992,607.9969,606.9967,590.0002,4880.228,5040.2257,4575.7127,631.9961,795.9936,5324.2227,791.9911,813.9951,923.9947,917.9916,942.9959,943.9942,967.9925,970.9926,1029.994,1156.9921,1210.9932,1251.9894,1307.0324,1336.0322,1366.0325,1332.5538,1584.5497,1608.5493,1576.5499,1351.554,1653.5475,1653.5475,1654.5484,1654.5484,1458.5535,1720.5498,1730.5493,1730.5493,1581.5503,1322.5549,1338.5545,1319.5578,1929.5469,1345.552,1345.552,1617.5532,1347.5537,1934.5473,1750.5499,1355.5479,1355.5479,1964.5481,1357.5543,1357.5543,1358.5528,1359.5531,2033.5475,1401.5531,1456.5528,2063.5463,1458.5517,2064.5467,2064.5467,1364.5513,1365.5522,1365.5522,1365.5522,1366.5538,1366.5538,1370.5527,1371.5511,1369.5518,1370.5559,1389.5497,1394.5531,1394.5531,1394.5531,1394.5531,1395.5531,1390.553,1418.5543,1419.5502,1419.5502,1419.5502,1426.559,1424.5579,2217.5529,1426.5527,1477.5517,1477.5517,1478.5516,2227.5551,2208.557,2208.557,2209.5502,2209.5502,2208.5474,1630.552,1611.5531,1466.5544,2242.545,1481.5596,2275.5532,1486.5537,2149.5919,2219.5913,2412.5901,2155.5939,2050.5788,2129.5915,2401.5863,2281.5902,2182.5902,2183.5885,1948.5849,1970.5927,2303.5916,2004.5908,1891.5921,1969.5932,2431.5888,1994.594,1943.5925,1883.595,1806.5961,1992.596,1866.5933,1922.5944,1764.5878,1765.5871,1766.5872,2463.5878,1796.595,1932.5931,1771.59,1772.5859,1774.5914,1773.5897,1777.59,1776.5926,1775.592,2161.5943,1776.5879,1828.5953,1784.5899,1829.5948,1782.5905,2041.5921,2001.5896,1797.5879,1980.591,2079.5916,1983.5915,1902.5963,1990.5942,1972.1115,1986.1097,2002.1111,2021.1108,2005.1121,2022.1058,1984.1131,1940.1113,2036.1104,2033.1094,1940.1113,1938.1113,1968.1112,1938.1113,1941.111,1939.111,1939.111,2016.1096,1940.1109,1995.1112,1941.1106,1936.1105,1941.1106,1937.1129,1937.1129,1942.113,1942.113,1944.1123,1944.1123,1943.112,1898.113,1892.1117,1901.1123,1938.1152,1945.1156,1894.1143,1938.1152,1896.1133,1938.1152,1897.1135,1903.1158,1899.1144,1891.1162,1907.1149,1900.1165,1901.1151,1894.1152,1939.1119,1894.1119,1900.11,1892.1118,1939.1119,1894.1119,1891.1105,1892.1118,1940.1122,1896.1111,1896.1111,1941.1113,1897.1104,1898.1108,1894.1123,1925.1113,1941.112,1884.1108,1888.1119,1903.1122,1940.1115,1894.1119,1924.1112,1922.1109,1924.1112,1880.108,1884.1113,1903.1092,1925.1103,1938.107,1886.1104,1923.11,1924.1092,1927.1096,1889.1087,1887.1096,1925.1024,1884.1107,1926.1095,1924.1092,1889.1087,1888.1102,1926.1045,1898.1125,1925.1113,2680.1062,1947.1105,1948.1129,1926.1045,1949.1125,1950.1128,1948.1108,1949.1132,1954.1116,1927.1048,1925.1121,1919.1101,1947.1118,1949.1132,1919.1112,1948.113,1949.112,1918.1085,1949.112,1922.1116,1918.1085,1926.1087,1922.1104,1919.1061,1920.1088,1925.1101,1925.1101,1927.1109,1925.1101,1922.1104,1925.1091,1927.11,1919.111,1919.111,1919.111,1928.1122,1918.1111,1921.1101,1923.1088,1920.1096,1925.1091,1925.1091,1919.1097,1928.1086,1926.1077,1928.1086,1960.1082,1930.111,1927.1079,1926.1093,1916.1097,1911.1097,1916.1097,1926.1093,1924.109,1930.1094,1928.1085,1929.1108,1929.1108,1923.1068,1907.1111,1920.1108,1912.1103,1913.1124,1912.1119,1949.0943,1912.1119,1918.1109,1926.1102,1922.1111,1913.1109,1915.1116,1927.1117,1926.1091,1910.11,1962.1107,1912.109,1916.1106,1910.11,1912.109,1926.1059,1914.1104,1924.1096,1911.1095,1908.1114,1908.1114,1916.1115,1911.1112,1911.1112,1917.1125,1924.1109,1910.1123,1925.1103,1917.1098,1920.9061,1927.11,2693.1055,1904.1116,1904.1116,1910.1116,1926.1103,1913.1114,1901.1102,1899.1118,1922.1086,1920.1116,1900.1116,1918.1098,1921.1128,1925.1107,1901.1128,1925.1107,1922.1114,1906.1125,1914.1126,1905.1116,1920.1108,1922.1119,1921.1098,1923.1105,1918.1103,2669.1026,1920.1108,1895.1127,1907.1104,1917.1109,1923.1122,1916.112,1908.1119,1917.1109,1918.1101,1919.1094,1920.1098,1920.1098,1916.11,1916.11,1917.1102,1921.1087,1905.1103,1909.1085,1918.1101,2664.1046,1925.1083,1918.1103,2700.104,1906.1104,2700.104,1905.1106,1908.1112,1906.1128,1909.1117,1910.1123,2675.1053,1913.1123,1910.1117,1912.1108,2214.1106,1981.1114,3207.1925,3214.1935,4017.185,4122.1844,3326.1935,4099.1854,3335.1936,4100.186,4126.1821,4114.1861,4168.1866,4167.189,3319.1936,4168.1883,4168.1883,3225.1924,3223.1942,4169.1856,3246.1887,3246.1887,3244.1912,4190.1842,3222.1902,4168.1822,4168.1822,3222.1902,4170.1875,3225.1934,3224.1929,4169.1841,4169.1841,3203.1937,3203.1937,3203.1937,4169.1841,4170.1859,4169.1861,3169.193,4170.1859,3193.1936,3192.1945,3195.1936,3153.1966,4197.1859,4200.187,4170.1863,4196.7522,3126.7634,4200.7543,4197.7532,3129.7626,4196.7522,3131.7617,4170.7536,4171.7108,4171.7108,4198.7104,4171.7108,4171.7108,3131.7149,4170.7065,4170.7065,4198.7104,4171.7118,4171.7118,4172.7161,4171.7118,4171.7118,4175.7169,3134.7243,4175.7151,4197.7137,2917.6825,4193.7099,4197.7137,4204.7133,3106.7195,4173.7083,4198.7144,4198.7144,4200.7112,3108.7228,2868.6826,4198.7144,2870.6837,2869.6826,2837.6725,2869.6826,4170.7147,4175.7126,2817.6822,2852.6781,2837.6725,2837.6725,4176.7124,4176.7124,2862.6796,2817.6822,2838.6827,4205.7133,2853.6836,2838.6718,2837.681,4200.7137,2854.6829,4205.7088,3197.7206,2856.6811,3198.7205,3263.7199,4181.253,4179.2498,4181.253,4182.2506,3238.2571,3239.2587,4182.2506,4183.2354,4181.2344,3235.2424,4182.2378,4182.2378,3238.2436,3238.2436,3260.2421,4182.2378,4182.2378,4182.2347,4182.2347,4208.2345,3235.244,3238.244,3215.244,3217.2444,3215.244,4208.2345,4181.2349,3204.2433,4182.2347,4182.2347,3214.2422,4211.2356,4209.2326,4209.2326,4205.2348,2825.2026,4212.2337,4212.2337,4211.2299,2992.2045,2991.1931,3096.7238,2991.1931,2980.2049,2995.2058,3011.4615,3098.7183,3044.7267,3098.7183,3062.7245,3097.7254,3086.7246,3109.7246,4486.753,3097.7254,3044.7267,3064.7234,3085.7265,3057.7237,3083.7246,3083.7246,3044.7252,3086.7254,3039.7246,3044.7252,2981.2039,3066.2643,3040.2666,3085.2662,2981.7459,3040.2666,2970.7472,3036.266,3038.8151,2970.2952,3038.8151,3039.8167,3040.816,2982.2953,3031.8168,3041.3243,3040.3547,3040.3547,3040.3547,2971.8346,3041.354,3037.3534,3035.3517,3035.3517,2945.8343,3036.3535,2946.8346,3040.3547,3040.3547,3041.354,2947.8186,2941.8174,3027.3389,3027.3389,3027.3389,3029.3381,3037.3375,2950.8125,2932.8178,2931.8156,3026.3383,3027.3378,3027.3378,3028.3383,2942.8168,2932.8178,3026.3383,3025.3361,3025.3361,2914.8165,3025.3361,3025.3361,2931.8156,3028.3378,2932.8156,3026.3361,2915.8165,3027.3383,2917.8174,3028.3378,2914.8164,2915.8165,2911.8175,2923.8166,3021.3304,2887.8186,2911.8175,2911.8175,3021.3304,3026.3361,3021.3304,2912.818,3027.3383,2888.8194,2923.8176,3023.3323,2924.8174,2891.8199,3027.3369,2890.8187,2900.8195,2890.8187,2888.8194,2916.8173,3027.3369,2879.8189,3022.3312,3018.074,3022.3312,3022.3312,2856.8188,2890.8187,3024.3363,2890.8187,2857.8208,2856.8196,2857.8208,3032.341,3000.8206,2856.8196,2843.8215,3000.8206,2890.8212,3090.3402,3019.076,2856.8196,2856.8196,2974.8159,3090.3402,2974.8159,2837.821,2843.8215,2836.8212,2974.8159,2843.8215,2837.8181,2974.8115,3038.3379,2851.8174,2843.8186,2851.8174,2804.8171,2804.8171,2975.8128,2804.8171,3074.3314,2973.8153,2836.8187,2849.8189,3106.3368,2850.8179,2850.8179,2851.8174,2850.8179,2973.8153,2770.8187,2769.8169,3611.3764,2975.8124,2771.8196,2851.8188,2844.8195,2770.8178,2975.8124,2975.8124,2770.8178,2974.8162,2975.8124,2770.8178,2771.8196,2969.8179,2969.8179,2970.8178,2974.8162,2969.8179,2970.8178,2974.8162,2974.8162,2956.8391,2955.8392,2968.8378,2969.8384,2955.8392,2970.8381,4504.3871,2969.8384,2955.8392,2954.8388,2955.8392,2955.8392,2956.8391,2956.8391,2955.8392,2956.8391,2954.8388,2812.8125,2813.8169,2806.8175,2806.8175,2812.8125,2797.8024,2775.8157,2813.8169,2778.8185,2812.8125,2797.8194,2797.8194,2778.8206,2777.8203,2778.8206,2778.8206,2740.8198,2773.8191,2772.8202,2775.8187,2772.8202,2777.8203,2766.8185,2705.821,2778.8206,2709.8204,2703.8184,2706.8205,2707.8197,2740.8188,2772.8197,2658.821,2773.8197,2706.8205,2772.8197,2780.8208,3795.3706,3884.3746,2707.8197,3144.3366,2704.8187,2658.822,2658.822,3796.3719,2654.8191,2632.8224,2631.8155,2631.8155,2799.8202,2631.8155,2633.8224,2632.8224,2646.8172,2632.8224,2732.8209,2632.8227,2616.8226,2625.8223,2634.8225,2624.8207,2624.8207,2648.8173,2625.8223,2599.821,2625.8234,2611.8242,2590.8236,2591.8249,2625.8234,2614.8245,2591.8249,2600.8237,2616.8227,2614.8245,2600.8196,2663.8396,2605.8391,2618.8402,2605.8175,2481.8218,2597.8202,2467.8204,2607.8174,2407.821,2597.8202,2606.819,2417.8218,2607.8199,2467.8223,2606.8184,2482.8227,2405.8216,2398.8227,2596.8207,2643.8214,2384.8223,2607.8199,2398.8227,2608.8183,2386.8223,2581.8206,2583.8189,2385.822,2582.8187,2386.8223,2383.8196,2582.8187,2327.8196,2568.8208,2584.8184,2330.8218,2364.8207,2645.8206,2582.8201,2582.8201,2599.8221,2581.8206,2569.8227,2599.8221,2570.8225,2754.8205,2668.8218,2570.8225,2578.8227,2548.8212,2582.8221,2611.8197,2556.819,2579.8217,2603.8213,2636.82,2576.8219,2584.8213,2584.8213,2582.8196,2533.8172,2535.8212,2585.8194,2648.8211,2317.8217,2579.8217,2647.8218,2580.8212,2322.8235,2529.8222,2502.8221,2495.8219,2534.8177,2256.8209,2581.8217,2300.8219,2256.8209,2291.8234,2557.8195,2255.8175,2551.8216,2586.8199,2502.8221,2496.8221,2488.8224,2588.8203,2245.9936,2244.9929,2243.9919,2589.9909,2548.9918,2488.9931,2239.4648,2497.9916,2572.9917,2232.9514,2411.992,2411.992,2388.9903,2204.9516,2209.7856,2451.8265,2240.2984,2464.8252,2357.8256,2388.8262,2673.8234,2204.7841,2392.8266,2208.7846,2369.8255,2389.8239,2204.7841,2208.7846,2208.7846,2205.7852,2395.8237,2205.7816,2680.8213,2162.7821,2336.8241,2221.7825,2325.8241,2674.8209,2324.8239,2184.7823,2209.7821,2604.8222,2260.8242,2161.783,2259.8215,2205.7816,2291.8229,2209.7821,2588.8224,2173.7831,2260.8242,2161.783,2244.8241,2194.7815,2194.7815,2240.2953,2161.783,2211.781,2241.2932,2146.7802,2157.7808,2243.821,2154.7819,2242.2938,2206.7795,2211.781,2209.7809,2153.7805,2246.8209,2157.7808,2169.7811,2147.7814,2210.78,2212.7803,2147.7814,2236.7808,2148.7773,2212.7803,2163.78,2163.78,2206.7795,2148.7773,2127.7811,2128.7807,2161.7806,2161.7806,2150.7829,2130.7831,2130.7831,2196.7807,2163.7822,2128.7824,2174.7821,2123.782,2128.7824,2128.7824,2208.7819,2129.782,2148.7827,2129.782,2175.7823,2174.7821,2150.7829,2149.7786,2127.7828,2126.7807,2127.7828,2149.7786,2130.7831,2127.7828,2674.8188,2121.7791,2115.7812,2150.7765,2165.7792,2151.7808,2127.7786,2124.7799,2128.7807,2124.7799,2149.7806,2128.7807,2129.7803,2127.7786,2128.7807,2080.7786,2128.7807,2085.7794,2128.7807,2086.7782,2196.7784,2016.7809,2033.7791,2037.7804,2020.7801,2052.7802,2034.7798,2127.7786,2105.7796,2675.8167,2106.7818,2009.7789,2124.7799,2014.7793,2130.7811,2017.7817,1999.7816,2129.7815,2128.7794,2118.7818,2117.782,2197.7792,2128.7794,2166.78,2015.7801,2198.7794,2053.781,2002.7802,2125.7807,2124.7788,2003.7802,2106.7804,2020.7819,2039.7793,2084.7788,2054.7803,2036.7809,2796.8194,2127.7814,2106.7804,2035.7806,1999.7816,2003.7802,2012.781,2017.7954,2001.7933,2017.7954,2022.7947,2087.794,2107.7942,1999.793,2001.7933,2000.7954,2002.7954,3101.3519,2001.7933,2005.7807,2000.7828,2111.7812,2111.7812,2003.78,2009.7804,2002.7828,2111.7812,2111.7812,2003.7816,2002.7789,2002.7789,1998.783,2000.7888,2005.7866,2025.7898,2005.7866,2011.787,2001.7886,1999.7904,1993.7872,1995.7888,1993.7872,1996.7878,2114.781,1998.7795,1997.781,1999.7762,1972.783,2000.7836,2029.7815,2004.7799,2060.7711,1971.7815,2114.781,2026.783,1995.7823,1984.7836,2110.7782,1996.782,1984.7836,2115.7814,1984.7838,2115.7814,1968.7814,1968.7814,1972.7819,1975.7846,1976.7828,1973.7834,1969.7829,1979.7835,1950.2641,1972.7819,1970.7813,1973.7834,1972.7819,1969.7829,1971.7818,1961.7831,1938.2662,1968.7808,1937.2633,1944.2638,1942.262,1944.2638,1974.7812,1973.7797,1931.2621,1934.2597,1939.264,1970.7807,1935.2576,1938.2598,1972.7796,1932.2614,1933.2614,1938.2598,1928.2616,1935.2576,1961.7808,1939.264,1971.7791,1950.26,1936.2597,1952.2626,1975.7819,1947.2628,1927.2411,1930.2621,1972.7798,1970.7799,2135.7783,1952.2626,1923.2604,1938.264,1924.2623,1950.2635,1943.2627,1940.2647,1953.2657,1937.2604,2168.7814,1942.2537,1941.2625,1975.7819,1945.2647,1947.2638,1935.2633,1934.2633,1943.2549,1943.2549,1938.2616,1947.2638,1945.2647,1934.2633,1931.2633,1929.264,1929.264,1932.2647,1936.2616,1942.2637,1940.2617,1941.2659,2693.8193,1984.7803,2049.7798,1925.2598,1929.2405,1927.2614,1940.2634,1934.263,1929.262,1930.2406,2605.8191,2809.8184,3182.3358,1957.2657,1938.2621,1927.2604,2139.7783,1936.2628,1927.2604,2007.7825,1933.2623,1928.2623,2608.8179,1933.2623,1937.2621,1918.2692,1918.2692,1919.2687,1922.11,1953.2699,1914.2683,1930.2678,1931.2683,1915.2705,1916.2695,1937.2686,1911.2703,1931.2683,1929.2681,1927.2679,1915.2705,1912.2693,1925.2665,1921.2634,1926.2668,1927.2679,1923.2675,1917.2628,1930.2626,1921.2623,1921.2623,1919.2637,1915.2628,2694.8196,1926.261,1914.2653,1913.2638,1913.2636,1926.2614,1926.2617,1930.2605,1931.2601,1918.2633,1918.2627,1922.2622,1908.2631,1910.2468,1911.2629,1909.2606,1917.2626,1917.2626,1915.264,1912.2628,1899.2635,1897.2608,1897.2608,1905.2623,1902.2632,1906.2638,1905.2623,1907.2628,1896.2521,1897.2608,1905.2682,1899.2666,1902.2693,1901.2688,1902.2693,1904.2679,1862.2673,1899.2666,1914.2658,1911.2657,1904.2679,1900.2687,1902.2693,1899.2666,1865.2696,1898.266,1851.2681,1847.263,1849.262,1855.262,1863.2609,1845.2611,1862.2611,1860.2625,1857.2631,1900.2602,1864.2609,1850.2595,1862.2611,1853.2604,1917.2628,1918.2626,1857.2631,1859.2622,1859.2622,1851.2609,1857.2618,1924.2633,2237.7788,1862.2623,1848.2644,1859.2622,1840.2553,1862.2623,1840.2553,1961.2633,1925.2648,1918.2642,1927.2645,1848.2625,1928.2646,1922.264,1852.261,1918.2619,1851.2635,1862.264,1918.2619,1856.2625,1847.2626,1922.264,1850.2617,1799.2639,1915.247,1914.2608,1915.247,1840.2626,1809.2631,1914.2608,1841.2637,1904.2649,1911.2652,1910.2637,1912.2642,1912.2642,1851.2628,1908.2641,2683.8144,1868.2657,1913.2632,2161.7812,1865.2637,1918.262,2027.7825,1917.2642,1851.2628,1905.265,1904.2649,1911.2652,1903.2652,1906.268,1909.2671,1908.2676,1909.2671,1902.2565,1936.2616,1920.266,1908.2676,1967.2668,1967.2668,1899.2675,1902.2565,1867.2665,1856.2673,1867.2665,1875.2675,1868.2665,1872.2669,1903.2652,1909.2671,1850.2629,1872.2639,1850.2629,1852.2648,1911.2636,1853.262,1868.2627,1872.2639,1850.2629,1849.2631,1862.2649,1867.2629,1867.264,1857.2638,1865.2634,1861.2651,1910.2651,1856.2626,1865.2634,1864.2639,1857.2638,1865.2634,1866.2656,1862.2635,1853.2661,1866.2656,1864.2639,1863.2662,1859.2635,1852.2641,1853.2661,1867.264,1851.2623,1851.2623,1862.263,1857.2605,1866.2613,1860.2614,1862.263,1862.263,1856.263,1856.263,1859.2627,2872.8178,1864.2641,1881.262,1851.2623,2872.8178,1852.2621,1854.264,1852.2621,1867.2635,1854.2621,1875.2632,2762.8174,1808.2601,1867.2614,1925.2639,3174.3378,3179.3614],63.9961,5324.2227]],"http_req_blocked":[[1598011016000,6381.640912666666,"mean"],[1598011024408,7557.3327,"max"],[1598011016000,6404.2722,"median"],[1598011020633,404.5241,"min"],[1598011024385,7371.3381,"p90"],[1598011024392,7423.3264,"p95"],[[1598011016000,1598011017000,1598011018000,1598011019000,1598011020000,1598011021000,1598011022000,1598011023000,1598011024000],[1657.0474,2401.313,3505.7184,3668.7133,5048.7496,5645.749,5703.7505,5825.2312,7557.3327],1657.0474,7557.3327,"http_req_blocked.max"],[[1598011016000,1598011017000,1598011018000,1598011019000,1598011020000,1598011021000,1598011022000,1598011023000,1598011024000],[1657.0474,2401.313,3505.7184,3668.7133,5037.7519,5636.7504,5678.7458,5825.2312,7445.3349],1657.0474,7445.3349,"http_req_blocked.p95"],[[1598011016000,1598011017000,1598011018000,1598011019000,1598011020000,1598011021000,1598011022000,1598011023000,1598011024000],[1657.0474,2401.313,3505.7184,3602.1862,5028.7529,5633.7503,5673.7482,5806.2191,7401.3333],1657.0474,7401.3333,"http_req_blocked.p90"],[[1598011016000,1598011017000,1598011018000,1598011019000,1598011020000,1598011021000,1598011022000,1598011023000,1598011024000],[1064.0351,2336.3138,2830.8945,1822.1548,404.5241,4861.2244,4873.2254,5652.2193,4898.2273],404.5241,5652.2193,"http_req_blocked.min"],[[1598011016037.0007,1598011016671.0007,1598011016813.0017,1598011017340.0037,1598011017461.0034,1598011018094.0007,1598011018655.0076,1598011019203.0076,1598011019223.0076,1598011019836.0007,1598011019861.0078,1598011019862.008,1598011019862.009,1598011019865.0078,1598011020153.0078,1598011020470.008,1598011020471.008,1598011020471.009,1598011020551.008,1598011020551.009,1598011020552.008,1598011020552.009,1598011020552.01,1598011020553.0078,1598011020553.0088,1598011020554.0078,1598011020557.0078,1598011020557.0088,1598011020589.0078,1598011020604.008,1598011020632.008,1598011020633.0078,1598011020655.0007,1598011020676.0007,1598011020760.008,1598011020783.008,1598011020809.0078,1598011020810.0007,1598011020835.008,1598011020838.008,1598011020871.008,1598011021002.0078,1598011021049.0078,1598011021099.008,1598011021151.0083,1598011021208.0083,1598011021238.0083,1598011021427.0034,1598011021447.0034,1598011021447.0044,1598011021451.0034,1598011021506.0032,1598011021507.0034,1598011021507.0044,1598011021508.0034,1598011021508.0044,1598011021554.0002,1598011021575.0034,1598011021584.0034,1598011021584.0044,1598011021692.0034,1598011021768.0002,1598011021784.0034,1598011021785.0032,1598011021790.0034,1598011021790.0044,1598011021790.0056,1598011021791.0034,1598011021791.0044,1598011021795.0034,1598011021825.0032,1598011021825.0044,1598011021825.0054,1598011021826.0032,1598011021826.0042,1598011021826.0051,1598011021827.0002,1598011021827.0015,1598011021872.0034,1598011021872.0044,1598011021924.0034,1598011021924.0044,1598011021925.0032,1598011021925.0044,1598011021925.0054,1598011021927.0034,1598011021928.0034,1598011021928.0044,1598011021928.0054,1598011021928.0063,1598011021928.0073,1598011021932.0034,1598011021933.0032,1598011021933.0044,1598011021934.0034,1598011021944.0034,1598011021945.0002,1598011021945.0012,1598011021945.0022,1598011021945.0032,1598011021945.0044,1598011021954.0032,1598011021980.0034,1598011021980.0044,1598011021980.0054,1598011021980.0063,1598011022054.0034,1598011022054.0044,1598011022054.0056,1598011022055.0034,1598011022081.0032,1598011022081.0044,1598011022082.0032,1598011022100.0034,1598011022100.0044,1598011022100.0054,1598011022101.0032,1598011022101.0044,1598011022101.0054,1598011022101.0063,1598011022102.0034,1598011022106.0032,1598011022106.0042,1598011022112.0034,1598011022112.0044,1598011022126.0034,1598011022250.0037,1598011022250.0046,1598011022251.004,1598011022251.005,1598011022263.004,1598011022263.005,1598011022264.004,1598011022264.005,1598011022264.0059,1598011022264.0068,1598011022268.004,1598011022268.005,1598011022268.0059,1598011022268.0068,1598011022268.008,1598011022268.009,1598011022268.01,1598011022274.0037,1598011022287.004,1598011022318.004,1598011022318.005,1598011022319.004,1598011022320.004,1598011022320.005,1598011022323.004,1598011022324.004,1598011022325.0037,1598011022325.005,1598011022325.0059,1598011022326.004,1598011022331.004,1598011022331.005,1598011022332.004,1598011022333.0037,1598011022334.004,1598011022334.005,1598011022335.004,1598011022335.005,1598011022335.0059,1598011022340.004,1598011022341.0037,1598011022341.005,1598011022342.004,1598011022344.004,1598011022345.0037,1598011022358.004,1598011022358.005,1598011022359.004,1598011022360.004,1598011022367.004,1598011022367.005,1598011022457.0088,1598011022457.01,1598011022487.009,1598011022491.009,1598011022491.01,1598011022491.011,1598011022502.009,1598011022504.009,1598011022504.01,1598011022504.011,1598011022504.012,1598011022504.013,1598011022504.0142,1598011022504.0151,1598011022505.0088,1598011022505.01,1598011022505.011,1598011022505.012,1598011022506.0088,1598011022506.0098,1598011022506.011,1598011022506.012,1598011022506.013,1598011022507.009,1598011022507.01,1598011022507.011,1598011022507.0122,1598011022508.009,1598011022508.01,1598011022508.011,1598011022508.012,1598011022508.013,1598011022508.0142,1598011022509.0088,1598011022509.01,1598011022509.011,1598011022509.012,1598011022509.013,1598011022509.014,1598011022510.009,1598011022510.01,1598011022510.0112,1598011022510.0122,1598011022510.0132,1598011022510.0142,1598011022510.0151,1598011022510.0164,1598011022511.009,1598011022511.01,1598011022511.011,1598011022511.0122,1598011022511.0132,1598011022511.0142,1598011022511.0151,1598011022511.016,1598011022512.001,1598011022512.002,1598011022512.0032,1598011022512.0042,1598011022512.0051,1598011022512.006,1598011022512.007,1598011022513.0088,1598011022513.01,1598011022513.011,1598011022513.012,1598011022513.013,1598011022513.014,1598011022513.0151,1598011022513.016,1598011022513.017,1598011022513.018,1598011022514.0088,1598011022514.0098,1598011022514.011,1598011022514.012,1598011022514.013,1598011022514.014,1598011022514.015,1598011022515.009,1598011022515.01,1598011022515.011,1598011022515.0122,1598011022515.0132,1598011022515.0142,1598011022515.0151,1598011022515.016,1598011022515.0173,1598011022515.0183,1598011022516.009,1598011022516.01,1598011022516.011,1598011022516.012,1598011022516.013,1598011022516.0142,1598011022516.0151,1598011022516.016,1598011022517.0088,1598011022517.01,1598011022517.011,1598011022517.012,1598011022517.013,1598011022517.014,1598011022517.0151,1598011022517.016,1598011022517.017,1598011022518.009,1598011022518.01,1598011022518.0112,1598011022518.0122,1598011022518.0132,1598011022518.0142,1598011022518.0151,1598011022519.009,1598011022519.01,1598011022519.011,1598011022519.0122,1598011022519.0132,1598011022519.0142,1598011022519.0151,1598011022519.016,1598011022519.0173,1598011022520.009,1598011022520.01,1598011022520.011,1598011022520.012,1598011022520.013,1598011022520.0142,1598011022520.0151,1598011022520.016,1598011022521.0088,1598011022521.01,1598011022521.011,1598011022521.012,1598011022521.013,1598011022521.014,1598011022521.0151,1598011022521.016,1598011022522.0088,1598011022522.0098,1598011022522.011,1598011022522.012,1598011022522.013,1598011022522.014,1598011022522.015,1598011022522.016,1598011022522.017,1598011022523.001,1598011022523.0022,1598011022523.0032,1598011022523.0042,1598011022523.0051,1598011022523.006,1598011022523.0073,1598011022523.0083,1598011022523.0093,1598011022524.009,1598011022524.01,1598011022524.011,1598011022524.012,1598011022524.013,1598011022524.0142,1598011022524.0151,1598011022524.016,1598011022524.017,1598011022525.0088,1598011022525.01,1598011022525.011,1598011022525.012,1598011022525.013,1598011022525.014,1598011022525.0151,1598011022526.009,1598011022526.01,1598011022526.0112,1598011022526.0122,1598011022526.0132,1598011022526.0142,1598011022526.0151,1598011022527.009,1598011022527.01,1598011022527.011,1598011022527.0122,1598011022527.0132,1598011022528.009,1598011022528.01,1598011022529.0068,1598011022529.0088,1598011022529.01,1598011022529.011,1598011022529.012,1598011022529.013,1598011022529.014,1598011022530.0088,1598011022530.0098,1598011022530.011,1598011022530.012,1598011022530.013,1598011022530.014,1598011022531.009,1598011022531.01,1598011022531.011,1598011022531.0122,1598011022531.0132,1598011022531.0142,1598011022531.0151,1598011022531.016,1598011022532.009,1598011022532.01,1598011022532.011,1598011022532.012,1598011022532.013,1598011022532.0142,1598011022532.0151,1598011022532.016,1598011022533.0088,1598011022533.01,1598011022533.011,1598011022533.012,1598011022533.013,1598011022533.014,1598011022533.0151,1598011022534.0012,1598011022534.0022,1598011022534.0032,1598011022534.0042,1598011022535.009,1598011022535.01,1598011022535.011,1598011022535.0122,1598011022535.0132,1598011022535.0142,1598011022535.0151,1598011022536.0007,1598011022536.0017,1598011022536.003,1598011022536.004,1598011022536.005,1598011022536.0059,1598011022536.0068,1598011022537.0088,1598011022537.01,1598011022537.011,1598011022537.012,1598011022537.013,1598011022538.0088,1598011022538.0098,1598011022538.011,1598011022555.009,1598011022555.01,1598011023824.0098,1598011023844.0098,1598011023855.0098,1598011023960.0098,1598011023964.0098,1598011023964.0107,1598011023965.0098,1598011023965.0107,1598011023965.0117,1598011023979.0098,1598011024033.0098,1598011024033.0107,1598011024034.0095,1598011024034.0107,1598011024034.0117,1598011024034.0127,1598011024034.0137,1598011024035.0098,1598011024035.0107,1598011024035.0117,1598011024035.013,1598011024035.014,1598011024035.015,1598011024035.0159,1598011024035.0168,1598011024035.018,1598011024036.0098,1598011024036.0107,1598011024036.0117,1598011024036.0127,1598011024036.014,1598011024036.015,1598011024036.0159,1598011024036.0168,1598011024036.0178,1598011024037.0098,1598011024037.0107,1598011024037.0117,1598011024037.0127,1598011024037.0137,1598011024037.015,1598011024037.0159,1598011024037.0168,1598011024038.0098,1598011024038.011,1598011024038.012,1598011024039.0054,1598011024039.0063,1598011024039.0076,1598011024039.0085,1598011024039.0095,1598011024039.0105,1598011024039.0115,1598011024039.0127,1598011024040.0051,1598011024040.006,1598011024040.007,1598011024040.0083,1598011024040.0093,1598011024040.0103,1598011024040.0112,1598011024040.0122,1598011024040.0134,1598011024041.0051,1598011024041.006,1598011024041.007,1598011024041.008,1598011024041.009,1598011024041.0103,1598011024041.0112,1598011024042.005,1598011024042.006,1598011024042.007,1598011024042.008,1598011024042.009,1598011024043.0051,1598011024043.006,1598011024043.0073,1598011024043.0083,1598011024043.0093,1598011024043.0103,1598011024043.0112,1598011024043.0125,1598011024043.0134,1598011024044.0051,1598011024044.006,1598011024044.007,1598011024044.0083,1598011024044.0093,1598011024044.0103,1598011024044.0112,1598011024044.0122,1598011024044.0134,1598011024044.0144,1598011024044.0154,1598011024044.0164,1598011024044.0173,1598011024044.0183,1598011024044.0195,1598011024044.0205,1598011024044.0215,1598011024045.0051,1598011024045.006,1598011024045.007,1598011024045.008,1598011024045.009,1598011024045.0103,1598011024045.0112,1598011024045.0122,1598011024047.0051,1598011024048.0005,1598011024048.0015,1598011024048.0024,1598011024048.0037,1598011024048.0046,1598011024048.0056,1598011024048.0066,1598011024049.0002,1598011024049.0012,1598011024049.0022,1598011024049.0032,1598011024049.0044,1598011024049.0054,1598011024049.0063,1598011024049.0073,1598011024049.0083,1598011024049.0095,1598011024050.0002,1598011024050.0012,1598011024050.0022,1598011024050.0032,1598011024050.0042,1598011024050.0051,1598011024050.0063,1598011024050.0073,1598011024050.0083,1598011024050.0093,1598011024050.0103,1598011024050.0115,1598011024050.0125,1598011024050.0134,1598011024050.0144,1598011024051,1598011024051.001,1598011024051.0022,1598011024051.0032,1598011024051.0042,1598011024051.0051,1598011024051.006,1598011024334.0056,1598011024334.0066,1598011024334.0076,1598011024334.0085,1598011024334.0095,1598011024335.0005,1598011024335.0017,1598011024335.0027,1598011024335.0037,1598011024335.0046,1598011024335.0056,1598011024335.0068,1598011024335.0078,1598011024335.0088,1598011024335.0098,1598011024335.0107,1598011024335.0117,1598011024335.013,1598011024335.014,1598011024336.0054,1598011024336.0063,1598011024336.0073,1598011024336.0085,1598011024336.0095,1598011024336.0105,1598011024336.0115,1598011024336.0125,1598011024337.0007,1598011024337.0017,1598011024337.0027,1598011024337.0037,1598011024337.005,1598011024337.0059,1598011024337.0068,1598011024337.0063,1598011024337.0073,1598011024337.0083,1598011024337.0095,1598011024337.0105,1598011024337.0115,1598011024337.0125,1598011024338.0015,1598011024338.0017,1598011024338.0027,1598011024338.0037,1598011024338.0046,1598011024338.0059,1598011024338.0068,1598011024338.0078,1598011024338.0088,1598011024338.0098,1598011024338.011,1598011024338.012,1598011024338.013,1598011024338.014,1598011024338.015,1598011024339.0017,1598011024339.0027,1598011024339.0037,1598011024339.0046,1598011024339.0056,1598011024339.0068,1598011024339.0078,1598011024339.0088,1598011024340.0015,1598011024340.0024,1598011024340.0037,1598011024340.0046,1598011024340.0056,1598011024340.0066,1598011024340.0076,1598011024340.0088,1598011024340.0098,1598011024340.0107,1598011024340.0117,1598011024340.0127,1598011024340.014,1598011024340.015,1598011024340.0159,1598011024341.0015,1598011024341.0024,1598011024341.0034,1598011024341.0046,1598011024341.0056,1598011024341.0066,1598011024341.0076,1598011024341.0085,1598011024341.0098,1598011024341.0107,1598011024341.0117,1598011024341.0127,1598011024341.0137,1598011024341.015,1598011024341.0159,1598011024341.0168,1598011024341.0178,1598011024341.0188,1598011024341.02,1598011024341.021,1598011024342.0017,1598011024342.0027,1598011024342.0037,1598011024342.0046,1598011024342.0059,1598011024342.0068,1598011024342.0078,1598011024342.0088,1598011024342.0098,1598011024342.011,1598011024342.012,1598011024342.013,1598011024342.014,1598011024342.015,1598011024342.016,1598011024342.017,1598011024342.018,1598011024342.019,1598011024342.02,1598011024342.0212,1598011024342.0222,1598011024343.0017,1598011024343.0027,1598011024343.0037,1598011024343.0046,1598011024343.0056,1598011024343.0068,1598011024343.0078,1598011024343.0088,1598011024343.0098,1598011024343.0107,1598011024343.0117,1598011024343.013,1598011024343.014,1598011024343.015,1598011024343.0159,1598011024343.0168,1598011024343.018,1598011024343.019,1598011024343.02,1598011024343.021,1598011024343.022,1598011024344.0015,1598011024344.0024,1598011024344.0037,1598011024344.0046,1598011024344.0056,1598011024344.0066,1598011024344.0076,1598011024344.0088,1598011024344.0098,1598011024344.0107,1598011024344.0117,1598011024344.0127,1598011024344.014,1598011024344.015,1598011024344.0159,1598011024344.0168,1598011024344.0178,1598011024344.019,1598011024344.02,1598011024344.021,1598011024344.022,1598011024344.023,1598011024345.0015,1598011024345.0024,1598011024345.0034,1598011024345.0046,1598011024345.0056,1598011024345.0066,1598011024345.0076,1598011024345.0085,1598011024345.0098,1598011024345.0107,1598011024345.0117,1598011024345.0127,1598011024345.0137,1598011024345.015,1598011024345.0159,1598011024345.0168,1598011024345.0178,1598011024345.0188,1598011024345.02,1598011024345.021,1598011024345.022,1598011024346.0017,1598011024346.0027,1598011024346.0037,1598011024346.0046,1598011024346.0059,1598011024346.0068,1598011024346.0078,1598011024346.0088,1598011024346.0098,1598011024346.011,1598011024346.012,1598011024346.013,1598011024346.014,1598011024346.015,1598011024346.016,1598011024346.017,1598011024346.018,1598011024350.0017,1598011024350.0027,1598011024350.0037,1598011024350.0046,1598011024350.0059,1598011024350.0068,1598011024350.0078,1598011024350.0088,1598011024350.0098,1598011024350.011,1598011024351.0002,1598011024351.0015,1598011024351.0024,1598011024351.0034,1598011024351.0044,1598011024351.0054,1598011024351.0063,1598011024351.0076,1598011024351.0085,1598011024351.0095,1598011024351.0105,1598011024351.0115,1598011024351.0127,1598011024351.0137,1598011024351.0146,1598011024352.0015,1598011024352.0024,1598011024352.0037,1598011024352.0046,1598011024352.0056,1598011024352.0066,1598011024352.0076,1598011024352.0088,1598011024352.0098,1598011024352.0107,1598011024352.0117,1598011024352.0127,1598011024352.014,1598011024352.015,1598011024352.0159,1598011024352.0168,1598011024353.0015,1598011024353.0024,1598011024353.0034,1598011024353.0046,1598011024353.0056,1598011024353.0066,1598011024353.0076,1598011024353.0085,1598011024353.0098,1598011024353.0107,1598011024353.0117,1598011024353.0127,1598011024353.0137,1598011024353.015,1598011024355.0017,1598011024355.0027,1598011024355.0037,1598011024355.0046,1598011024355.0056,1598011024355.0068,1598011024355.0078,1598011024355.0088,1598011024355.0098,1598011024356.0015,1598011024356.0024,1598011024356.0037,1598011024356.0046,1598011024356.0056,1598011024356.0066,1598011024356.0076,1598011024356.0088,1598011024356.0098,1598011024356.0107,1598011024357.0002,1598011024361,1598011024361.001,1598011024361.002,1598011024362.0015,1598011024362.0024,1598011024362.0034,1598011024362.0044,1598011024362.0056,1598011024362.0066,1598011024362.0076,1598011024362.0085,1598011024362.0095,1598011024363.0017,1598011024363.0027,1598011024363.0037,1598011024363.0046,1598011024363.0056,1598011024363.0068,1598011024363.0078,1598011024363.0088,1598011024363.0098,1598011024363.0107,1598011024363.0117,1598011024363.013,1598011024364.0015,1598011024364.0024,1598011024364.0037,1598011024364.0046,1598011024364.0056,1598011024364.0066,1598011024364.0076,1598011024364.0088,1598011024364.0098,1598011024364.0107,1598011024365,1598011024365.001,1598011024365.002,1598011024365.003,1598011024365.0042,1598011024365.0051,1598011024366.0017,1598011024366.0027,1598011024366.0037,1598011024366.0046,1598011024366.0059,1598011024366.0068,1598011024366.0078,1598011024366.0088,1598011024366.0098,1598011024366.011,1598011024366.012,1598011024366.013,1598011024367.0017,1598011024367.0027,1598011024367.0037,1598011024367.0046,1598011024367.0056,1598011024367.0068,1598011024367.0078,1598011024367.0088,1598011024367.0098,1598011024367.0107,1598011024367.0117,1598011024367.013,1598011024367.014,1598011024367.015,1598011024367.0159,1598011024367.0168,1598011024368.0015,1598011024368.0024,1598011024368.0037,1598011024368.0046,1598011024368.0056,1598011024368.0066,1598011024368.0076,1598011024368.0088,1598011024368.0098,1598011024368.0107,1598011024368.0117,1598011024368.0127,1598011024368.014,1598011024368.015,1598011024368.0159,1598011024368.0168,1598011024368.0178,1598011024369.0015,1598011024369.0032,1598011024369.0044,1598011024369.0054,1598011024369.0063,1598011024369.0073,1598011024369.0083,1598011024369.0095,1598011024369.0105,1598011024369.0115,1598011024369.0125,1598011024369.0134,1598011024369.0146,1598011024369.0156,1598011024369.0166,1598011024370.0015,1598011024370.0024,1598011024370.0034,1598011024370.0044,1598011024370.0056,1598011024370.0066,1598011024370.0076,1598011024370.0085,1598011024370.0095,1598011024370.0107,1598011024370.0117,1598011024370.0127,1598011024370.0137,1598011024370.0146,1598011024370.0156,1598011024370.0168,1598011024371.0017,1598011024371.0027,1598011024371.0037,1598011024371.0046,1598011024371.0056,1598011024371.0068,1598011024371.0078,1598011024371.0088,1598011024371.0098,1598011024371.0107,1598011024371.0117,1598011024371.013,1598011024371.014,1598011024371.015,1598011024371.0159,1598011024371.0168,1598011024371.018,1598011024371.019,1598011024371.02,1598011024371.021,1598011024371.022,1598011024371.0232,1598011024371.0242,1598011024371.0251,1598011024371.0261,1598011024371.027,1598011024371.0283,1598011024372.0015,1598011024372.0024,1598011024372.0037,1598011024372.0046,1598011024372.0056,1598011024372.0066,1598011024372.0076,1598011024372.0088,1598011024372.0098,1598011024372.0107,1598011024372.0117,1598011024372.0127,1598011024372.014,1598011024372.015,1598011024372.0159,1598011024372.0168,1598011024372.0178,1598011024372.019,1598011024372.02,1598011024372.021,1598011024372.022,1598011024372.023,1598011024372.0242,1598011024372.0251,1598011024372.0261,1598011024372.027,1598011024372.028,1598011024372.0293,1598011024372.0303,1598011024373.0015,1598011024373.0024,1598011024373.0034,1598011024373.0046,1598011024373.0056,1598011024373.0066,1598011024373.0076,1598011024373.0085,1598011024373.0098,1598011024373.0107,1598011024373.0117,1598011024373.0127,1598011024373.0137,1598011024373.015,1598011024373.0159,1598011024373.0168,1598011024373.0178,1598011024373.0188,1598011024373.02,1598011024373.021,1598011024373.022,1598011024373.023,1598011024373.024,1598011024373.025,1598011024373.0261,1598011024373.027,1598011024374.0017,1598011024374.0027,1598011024374.0037,1598011024374.0046,1598011024374.0059,1598011024374.0068,1598011024374.0078,1598011024374.0088,1598011024374.0098,1598011024374.011,1598011024374.012,1598011024374.013,1598011024374.014,1598011024374.015,1598011024374.016,1598011024374.017,1598011024374.018,1598011024374.019,1598011024374.02,1598011024374.0212,1598011024374.0222,1598011024374.0232,1598011024374.0242,1598011024374.0251,1598011024374.0261,1598011024374.0273,1598011024374.0283,1598011024374.0293,1598011024374.0303,1598011024374.0312,1598011024374.0325,1598011024374.0334,1598011024375.0017,1598011024375.0027,1598011024375.0037,1598011024375.0046,1598011024375.0056,1598011024375.0068,1598011024375.0078,1598011024375.0088,1598011024375.0098,1598011024375.0107,1598011024375.0117,1598011024375.013,1598011024375.014,1598011024375.015,1598011024375.0159,1598011024375.0168,1598011024375.018,1598011024375.019,1598011024375.02,1598011024375.021,1598011024375.022,1598011024375.0232,1598011024375.0242,1598011024375.0251,1598011024375.0261,1598011024375.027,1598011024375.0283,1598011024375.0293,1598011024375.0303,1598011024375.0312,1598011024376.0002,1598011024376.0012,1598011024376.0022,1598011024376.0034,1598011024376.0044,1598011024376.0054,1598011024376.0063,1598011024376.0073,1598011024376.0085,1598011024376.0095,1598011024376.0105,1598011024376.0115,1598011024379.0017,1598011024380.0002,1598011024380.0012,1598011024380.0022,1598011024380.0034,1598011024380.0044,1598011024380.0054,1598011024380.0063,1598011024380.0073,1598011024381.0015,1598011024381.0024,1598011024381.0034,1598011024382.002,1598011024382.003,1598011024382.004,1598011024382.005,1598011024382.006,1598011024382.007,1598011024382.008,1598011024382.009,1598011024382.01,1598011024382.0112,1598011024382.0122,1598011024382.0132,1598011024383.0017,1598011024383.0027,1598011024383.0037,1598011024383.0046,1598011024383.0056,1598011024383.0068,1598011024383.0078,1598011024383.0088,1598011024383.0098,1598011024383.0107,1598011024383.0117,1598011024383.013,1598011024383.014,1598011024383.015,1598011024383.0159,1598011024383.0168,1598011024383.018,1598011024384.0015,1598011024384.0024,1598011024384.0037,1598011024384.0046,1598011024384.0056,1598011024384.0066,1598011024384.0076,1598011024384.0088,1598011024384.0098,1598011024384.0107,1598011024384.0117,1598011024384.0127,1598011024384.014,1598011024384.015,1598011024384.0159,1598011024384.0168,1598011024384.0178,1598011024384.019,1598011024384.02,1598011024384.021,1598011024385.0002,1598011024385.0012,1598011024385.0022,1598011024385.0032,1598011024385.0044,1598011024385.0054,1598011024385.0063,1598011024385.0073,1598011024385.0083,1598011024385.0095,1598011024385.0105,1598011024385.0115,1598011024385.0125,1598011024385.0134,1598011024385.0146,1598011024385.0156,1598011024385.0166,1598011024385.0176,1598011024385.0186,1598011024385.0195,1598011024385.0208,1598011024385.0217,1598011024385.0227,1598011024385.0237,1598011024386.0015,1598011024386.0024,1598011024386.0034,1598011024386.0044,1598011024386.0056,1598011024386.0066,1598011024386.0076,1598011024386.0085,1598011024386.0095,1598011024386.0107,1598011024386.0117,1598011024386.0127,1598011024386.0137,1598011024386.0146,1598011024386.0156,1598011024386.0168,1598011024386.0178,1598011024386.0188,1598011024386.0198,1598011024386.0208,1598011024386.022,1598011024387.0017,1598011024387.0027,1598011024387.0037,1598011024387.0046,1598011024387.0056,1598011024387.0068,1598011024387.0078,1598011024387.0088,1598011024387.0098,1598011024387.0107,1598011024387.0117,1598011024387.013,1598011024387.014,1598011024387.015,1598011024387.0159,1598011024387.0168,1598011024387.018,1598011024387.019,1598011024388.0015,1598011024388.0024,1598011024388.0037,1598011024388.0046,1598011024388.0056,1598011024388.0066,1598011024388.0076,1598011024389.0015,1598011024389.0024,1598011024389.0034,1598011024389.0046,1598011024389.0056,1598011024390.0017,1598011024390.0027,1598011024390.0037,1598011024390.0046,1598011024390.0059,1598011024390.0068,1598011024390.0078,1598011024390.0088,1598011024390.0098,1598011024390.011,1598011024390.012,1598011024390.013,1598011024390.014,1598011024391.0017,1598011024391.0027,1598011024391.0037,1598011024391.0046,1598011024391.0056,1598011024391.0068,1598011024391.0078,1598011024391.0088,1598011024391.0098,1598011024391.0107,1598011024391.0117,1598011024391.013,1598011024391.014,1598011024391.015,1598011024391.0159,1598011024391.0168,1598011024391.018,1598011024391.019,1598011024391.02,1598011024391.021,1598011024391.022,1598011024391.0232,1598011024391.0242,1598011024392,1598011024392.001,1598011024392.002,1598011024392.0032,1598011024392.0042,1598011024392.0051,1598011024392.006,1598011024392.007,1598011024392.0083,1598011024397.0015,1598011024397.0024,1598011024398.0017,1598011024398.0027,1598011024398.0037,1598011024398.0046,1598011024399.0017,1598011024399.0027,1598011024399.0037,1598011024399.0046,1598011024399.0056,1598011024399.0068,1598011024400.0015,1598011024400.0024,1598011024400.0037,1598011024400.0046,1598011024400.0056,1598011024400.0066,1598011024400.0076,1598011024400.0088,1598011024400.0098,1598011024400.0107,1598011024400.0117,1598011024400.0127,1598011024400.014,1598011024400.015,1598011024401.0015,1598011024401.0024,1598011024401.0034,1598011024401.0046,1598011024401.0056,1598011024401.0066,1598011024401.0076,1598011024401.0085,1598011024401.0098,1598011024401.0107,1598011024401.0117,1598011024401.0127,1598011024401.0137,1598011024401.015,1598011024401.0159,1598011024401.0168,1598011024401.0178,1598011024402.0015,1598011024402.0024,1598011024402.0034,1598011024402.0044,1598011024402.0056,1598011024402.0066,1598011024402.0076,1598011024402.0085,1598011024402.0095,1598011024402.0107,1598011024402.0117,1598011024402.0127,1598011024402.0137,1598011024402.0146,1598011024402.0156,1598011024402.0168,1598011024403.0017,1598011024403.0027,1598011024403.0037,1598011024403.0046,1598011024403.0056,1598011024403.0068,1598011024403.0078,1598011024403.0088,1598011024403.0098,1598011024403.0107,1598011024403.0117,1598011024403.013,1598011024403.014,1598011024403.015,1598011024403.0159,1598011024403.0168,1598011024404.0015,1598011024404.0024,1598011024404.0037,1598011024404.0046,1598011024404.0056,1598011024404.0066,1598011024404.0076,1598011024404.0088,1598011024404.0098,1598011024404.0107,1598011024404.0117,1598011024404.0127,1598011024404.014,1598011024404.015,1598011024404.0159,1598011024404.0168,1598011024404.0178,1598011024404.019,1598011024404.02,1598011024405.0015,1598011024405.0024,1598011024405.0034,1598011024405.0046,1598011024405.0056,1598011024405.0066,1598011024405.0076,1598011024405.0085,1598011024405.0098,1598011024405.0107,1598011024405.0117,1598011024405.0127,1598011024405.0137,1598011024405.015,1598011024405.0159,1598011024405.0168,1598011024405.0178,1598011024405.0188,1598011024405.02,1598011024405.021,1598011024406.0017,1598011024406.0027,1598011024406.0037,1598011024406.0046,1598011024406.0059,1598011024406.0068,1598011024406.0078,1598011024406.0088,1598011024406.0098,1598011024406.011,1598011024406.012,1598011024406.013,1598011024406.014,1598011024406.015,1598011024406.016,1598011024406.017,1598011024406.018,1598011024406.019,1598011024406.02,1598011024406.0212,1598011024406.0222,1598011024407.0017,1598011024407.0027,1598011024407.0037,1598011024407.0046,1598011024407.0056,1598011024407.0068,1598011024407.0078,1598011024407.0088,1598011024407.0098,1598011024407.0107,1598011024407.0117,1598011024407.013,1598011024408.0015,1598011024408.0024,1598011024408.0037,1598011024408.0046,1598011024408.0056,1598011024408.0066,1598011024408.0076,1598011024408.0088,1598011024408.0098,1598011024408.0107,1598011024408.0117,1598011024408.0127,1598011024408.014,1598011024408.015,1598011024408.0159,1598011024408.0168,1598011024408.0178,1598011024408.019,1598011024408.02,1598011024408.021,1598011024409.0015,1598011024409.0024,1598011024409.0034,1598011024409.0046,1598011024409.0056,1598011024409.0066,1598011024409.0076,1598011024409.0085,1598011024409.0098,1598011024409.0107,1598011024409.0117,1598011024409.0127,1598011024409.0137,1598011024409.015,1598011024409.0159,1598011024409.0168,1598011024409.0178,1598011024409.0188,1598011024409.02,1598011024409.021,1598011024410.0015,1598011024410.0024,1598011024410.0034,1598011024410.0044,1598011024410.0056,1598011024410.0066,1598011024413.0015,1598011024416.0017],[1064.0351,1657.0474,1635.0328,2336.3138,2401.313,2830.8945,3505.7184,3668.7133,3602.1862,1822.1548,2484.3144,2513.3156,2487.3135,2592.3128,4880.2254,4871.2254,4879.23,4891.2276,4989.7626,4978.7615,5027.7466,5028.7529,5027.7466,5037.7519,5029.7531,5048.7496,772.5218,612.5241,1109.0354,4918.2212,4875.2263,404.5241,4888.2283,4896.2269,4871.2277,4883.2298,4882.226,4873.2246,4915.7589,4868.2277,4866.2278,4878.2258,4887.7586,4885.2286,4889.7539,4861.2244,4864.2234,5190.7506,4882.226,4889.761,4912.2275,5191.2213,5187.2224,5179.2217,5183.222,5196.7519,5134.2238,5203.2223,5180.2234,5230.7532,5169.7507,5487.0797,5477.2223,5503.221,5466.2222,5475.2228,5479.2215,5469.2208,5467.2215,5478.2189,5137.7554,5488.227,5488.227,5489.2258,5487.2215,5482.2214,5474.2211,5488.2205,4869.2278,5548.7523,5503.2187,5489.2208,5494.2238,5511.7501,5509.7506,5628.7537,5620.7513,5630.7539,5633.7515,5637.7517,5625.7528,5629.7523,5641.7495,5636.7504,5630.7434,5616.7542,5626.751,5633.7503,5616.7514,5629.7509,5645.749,5634.7492,5630.7523,5620.7511,5620.7511,5617.7556,5659.2201,5659.2212,5656.2207,5659.221,5667.7513,5654.7518,5678.7506,4873.2254,4895.2226,4876.2235,4879.2215,4892.223,4889.2246,5538.7524,5585.7479,5662.2199,5659.2187,5662.2198,5664.2202,5660.2191,5166.755,5056.2248,4875.2289,5128.2236,5293.7615,5222.7515,5005.2226,5063.7492,5168.7516,5176.7528,5398.7599,5382.7515,5044.7511,5343.7519,5456.7506,5372.7516,4889.7479,5375.7516,5424.7499,5501.7436,5591.7479,5405.7514,5510.7515,5479.7436,5635.7584,5623.7583,5631.7575,5557.2216,5591.7509,5489.7489,5629.7521,5636.7543,5628.7506,5627.7546,5633.7553,5633.7524,5630.7522,5242.7523,5630.7575,5592.7462,5624.7448,5573.7508,5640.7536,5384.7444,5438.7512,5636.7558,5309.2221,5374.7508,5472.7508,5559.7481,5472.7508,5565.7483,5531.7476,5564.7504,5517.7481,5567.7466,5555.7511,5613.7479,5625.7206,5478.2263,5481.2202,5619.7498,5634.7422,5619.7498,5625.7464,5643.7503,5631.7506,5622.7493,5564.7511,5640.7503,5576.7503,5629.7518,5647.7511,5636.7489,5645.7501,5644.7502,5641.7497,5635.7488,5632.7431,5629.7506,5641.7507,5658.7503,5659.7491,5661.7498,5647.7508,5637.7498,5659.7496,5644.7502,5653.22,5631.7461,5654.2218,5660.7428,5664.7505,5656.2189,5638.2204,5666.7512,5663.7505,5657.2201,5635.7505,5664.7462,5646.2209,5658.2202,5635.7505,5658.219,5648.2226,5675.7489,5652.7477,5662.7511,5652.2187,5634.7514,5665.7515,5656.0788,5671.7485,5652.7517,5634.7506,5660.2215,5703.7505,5668.7477,5639.7508,5661.0775,5647.7487,5646.7504,5663.7506,5678.7509,5682.7398,5658.7481,5661.7501,5646.7521,5654.2204,5643.7411,5666.7503,5639.7511,5676.7513,5676.7512,5657.7502,5665.2194,5656.7582,5663.7504,5657.2219,5676.7506,5667.7581,5651.2198,5653.7517,5671.2188,5628.7478,5641.7488,5666.7578,5626.7458,5643.7498,5628.7478,5644.7511,5629.7514,5647.7576,5658.7509,5675.7528,5644.7507,5636.75,5676.7529,5641.749,5641.7512,5677.7517,5640.75,5650.7516,5656.7542,5658.7529,5647.7508,5659.7513,5649.7524,5659.7515,5671.7516,5643.751,5668.7512,5652.7504,5653.752,5651.7511,5652.7522,5653.7521,5652.7522,5655.7511,5657.751,5655.7515,5663.7537,5673.7511,5656.747,5661.7524,5655.7503,5656.7533,5656.7238,5643.7525,5636.7532,5667.7498,5653.7516,5662.7526,5658.7419,5656.7494,5649.7499,5655.7482,5653.7519,5671.7532,5664.7542,5664.7494,5657.7543,5651.7558,5649.221,5685.7443,5686.7511,5659.7503,5644.2209,5643.769,5670.7488,5649.7441,5655.7523,5656.75,5656.7494,5650.2202,5650.7497,5648.7532,5669.7511,5621.749,5646.2227,5651.2334,5665.7515,5661.7533,5650.7551,5669.7506,5697.749,5666.7508,5666.7504,5658.2171,5664.7491,5666.7505,5661.7486,5646.2174,5685.7443,5654.2188,5689.7491,5646.2209,5650.2202,5655.7503,5654.2212,5677.7401,5659.2199,5658.2202,5696.751,5648.2203,5657.2224,5678.7458,5660.7428,5646.2174,5665.2188,5649.2204,5661.7502,5685.7517,5668.2202,5640.2217,5660.7516,5665.2173,5658.2171,5671.7479,5690.7513,5657.7519,5667.7507,5669.7464,5655.2204,5668.2192,5667.7502,5663.2185,5698.7509,5651.2201,5655.7473,5651.2198,5663.2205,5648.2211,5656.2183,5669.7511,5656.745,5688.7512,5651.2201,5668.7506,5660.0773,5656.2336,5679.7503,5659.2215,5663.75,4904.2256,5675.7529,5651.2198,5661.2196,5677.746,5664.2196,5674.7476,5664.2202,5677.7496,5675.7469,5673.7501,5683.7468,5657.2201,5673.7482,5666.2202,5437.7496,5641.7432,5663.75,5658.221,5740.7477,5734.2228,5652.2193,5806.2191,5669.2199,5780.2216,5768.2182,5825.2312,5784.2206,5800.2176,5809.7489,5834.2193,5824.2203,5827.2233,5829.2196,5817.2187,5825.2195,5803.2181,5799.2195,5930.747,5833.2192,5850.2188,5827.2199,5861.7509,5810.2179,5816.2188,5822.2174,5843.2185,5855.2189,5829.2173,5831.2171,5860.2183,5852.2187,5847.2106,5857.219,5888.2202,5844.2203,5859.221,5848.2191,5861.2208,5894.2155,5897.2221,5943.2187,5885.2213,5971.7463,5952.2156,5951.2185,5953.747,5909.2194,5956.2203,5901.2234,5919.2199,5937.2182,5923.2192,5945.2168,5920.211,5949.2225,5924.2251,5955.2174,5947.2163,5936.2187,5940.2202,5959.2227,5921.2201,5952.2223,5935.2227,5799.2197,5900.2194,6169.2612,6193.1162,6144.2565,6112.7496,6158.217,5987.2171,5932.2198,5946.2143,6193.1162,6178.2594,5953.218,5940.2177,6179.2579,6186.2592,6186.2554,6176.2577,6207.2676,6177.2575,4898.2273,6191.2598,6208.2584,6171.2619,6221.2686,6208.2678,6207.2596,6195.2587,6168.2611,6207.2579,6216.2499,5717.2212,6160.2612,6209.2676,6203.2576,6183.2597,6180.2546,5754.7495,5893.7598,6181.2583,5878.2198,5806.2191,5794.2187,5888.2237,5796.2195,5793.2204,5838.2204,5814.219,5794.2186,5809.2186,5818.2201,5817.2193,5832.2185,5807.2176,5826.2202,5833.2194,5791.2214,5799.2195,5811.2186,5848.2197,5843.221,5882.2186,5822.2192,5822.2109,5858.2193,5840.2188,5851.2191,5872.2193,5853.2199,5844.2181,5855.2204,5848.2188,5840.2206,5745.7527,5882.2172,5872.2191,5873.2191,6218.2564,5773.7526,5725.2191,5734.2185,6324.7771,6311.787,6219.2576,6325.7885,6328.7787,6357.7798,6309.2565,6212.2647,6277.2564,6223.2648,6269.2568,6241.2567,6227.2554,6199.2591,6108.7469,6208.2471,6274.2568,6253.2598,6222.2569,6254.2582,6238.2573,6230.2562,6271.2561,6237.2545,6310.2575,6271.2561,6328.7787,6260.2572,6279.2575,6257.2576,6341.7781,6273.2542,6371.7766,6307.2577,6312.2584,6356.7806,6274.2604,6286.2556,6290.2557,6331.7749,6325.2556,6269.2577,6321.257,6267.2569,6314.2568,6345.7761,6306.2562,6257.2566,6266.2593,6278.2596,6329.7775,6298.2561,6384.7751,6290.2561,6285.2546,6304.2576,6378.7747,6470.3074,6287.2564,6309.2549,6291.2558,6275.2546,6287.2578,6372.7828,6406.7776,6374.7782,6308.257,6276.2566,6274.2566,6292.2559,6166.7754,6362.7764,6269.2559,6314.259,6325.2506,6417.7777,6283.2573,6296.2586,6384.776,6280.2563,6372.7772,6293.2568,6435.7763,6330.2566,6362.778,6287.2576,6409.7788,6387.7777,6431.7767,6308.7788,6308.2633,6443.7747,6388.7751,6414.7772,6309.2619,6315.2581,6342.2647,6426.7757,6306.2559,6443.7747,6125.7839,6316.2617,6391.7788,6392.7771,6311.2576,6381.7697,6353.7764,6364.7779,6416.7797,6390.7795,6317.2628,6386.7761,6332.2628,6325.5212,6285.2656,6275.2638,6445.7552,6413.776,6338.2623,6383.7789,6399.7775,6252.7689,6432.7795,6279.2552,6306.775,6459.7786,6448.7757,6308.776,6364.7767,6238.2573,6340.5217,6374.7784,6401.7668,6342.7823,6243.2559,6357.7792,6391.778,6446.7764,6441.7742,6325.7795,6417.7776,6417.7746,6364.7816,6320.257,6459.7764,6282.7775,6421.7771,6480.778,6424.7772,6338.7711,6306.7776,6321.7832,6332.7786,6423.7737,6205.7784,6234.2559,6265.7773,6416.7773,6424.776,6428.7744,6387.7817,6488.7646,6519.7742,6572.7759,6325.7816,6514.7764,6458.7778,6413.7769,6504.7704,6344.7829,6345.7791,6498.777,6348.7773,6349.7824,6557.778,6474.776,6367.7769,6355.7769,6348.7782,6365.7778,6352.7763,6380.7773,6353.7796,6378.7787,6397.776,6376.7764,6338.7774,6363.7751,6379.7739,6376.7771,6212.2611,6364.7761,6368.7745,6360.7674,6391.776,6386.7746,6392.7755,6380.7744,6367.7736,6366.7753,6384.7751,6457.7763,6441.767,6311.7778,6449.776,6502.782,6488.7745,6530.7762,6473.7826,6497.7757,6481.7811,6455.7783,6439.7781,6536.7735,6498.7765,6515.7774,6548.7723,6535.777,6512.7773,6489.7741,6497.7788,6491.7762,6505.7778,6497.7786,6546.7753,6496.7749,6580.7764,6601.7765,6530.7764,6588.7762,6538.7761,6340.7772,6634.7752,6524.7764,6565.7706,6501.7773,6498.7741,5625.7556,5495.2223,6567.7766,6215.2592,6610.7765,6607.7759,6638.7752,5617.7252,6642.7781,6619.7745,6635.7821,6659.7826,6483.7695,6611.7746,6646.7738,6631.7727,6589.7792,6653.7753,6566.7765,6669.777,6645.7743,6667.7759,6612.7768,6809.3062,6636.7765,6651.7763,6651.7761,6654.776,6809.3062,6515.7772,6669.7759,6714.7764,6676.7768,6623.7744,6763.7751,6703.7773,6505.7679,6677.777,6681.7782,6629.7775,6639.7766,6659.7682,6699.7794,6808.7741,6663.7748,6811.7735,6692.7764,6939.7739,6692.7757,6699.7763,6862.7747,6686.7754,6900.7734,6691.7753,6790.7739,6901.7746,6862.7738,6705.7758,6609.7677,6918.7741,6688.7795,6906.7746,6701.7803,6951.7739,6684.7766,6676.7794,6938.752,6736.7763,6944.7726,6961.7759,6668.777,6940.7758,6732.7752,6698.7758,6968.7747,6929.7744,6742.7748,6715.7758,6679.7768,6688.7792,6678.7786,6551.7772,6720.7726,6758.774,6556.7734,6609.7758,6722.7741,6720.7754,6747.7689,6730.7779,6526.7785,6763.7766,6753.7736,6652.7741,6709.7742,6721.7738,6686.7748,6766.7749,6675.7773,6745.7794,6746.7639,6722.7775,6608.7684,6985.7764,6762.7745,6639.77,6694.7696,7020.7732,6687.7773,6713.7754,6784.7752,6843.771,7026.7647,6778.7725,7005.7761,7107.7741,6968.7757,6701.7779,7030.7808,6711.778,6550.7743,6789.7741,6764.7751,6858.7737,6725.7733,7085.7721,7067.7753,7082.7722,6731.7751,6777.7723,6884.773,7096.3005,6805.7761,6747.7755,7061.8156,6853.777,6902.7752,6925.7726,7103.8153,7144.8142,6968.3032,7030.3025,6828.7754,6988.7711,6919.7749,6658.7751,7159.8146,6908.7664,6890.816,6906.7746,6909.7746,7118.8151,6925.816,7121.7937,7170.8144,6885.7744,7113.8171,6616.777,7159.8162,6953.7749,7101.8162,7027.7734,6624.7774,6974.7744,7169.8155,7113.815,6654.7756,7037.7725,6993.8155,7057.7764,7131.8148,7067.7734,7113.815,6696.7762,7166.8049,6865.7758,7233.8137,7083.7737,7143.8152,7126.8157,7035.3019,7151.8158,6951.8178,7138.3023,7004.8149,7175.8141,7093.7736,7203.8134,7023.3019,7132.8151,7130.8037,7089.8137,6981.8155,7076.7753,7162.8158,7151.8138,7160.8157,7069.8098,6921.8166,7182.8114,7064.8145,7195.8183,7128.8056,7163.8147,7139.8147,7100.8178,7227.8178,7193.8138,7206.8142,7181.8135,7171.8143,7173.8146,6958.6636,7194.8132,7138.8153,7128.816,7163.8158,7241.3426,7219.804,6961.8163,7177.815,7121.8125,7190.8173,7220.8121,6953.8182,6926.815,7118.81,7175.813,6992.8154,7191.8125,7167.8094,7033.817,7201.8127,7232.812,7032.8166,6598.7788,7226.8174,7213.8113,7216.8163,7171.8149,7169.8185,7192.8164,7203.812,7033.817,7170.8162,7189.8151,7180.8116,7168.8136,7230.8158,7023.8146,7233.8164,7171.8147,7248.8133,7170.8145,7240.8148,7098.8177,7300.8155,7297.8132,7065.8358,7317.8124,7286.8155,7281.8161,7229.8163,7285.815,6618.7733,7050.8141,7308.8156,7193.8149,7278.8168,7200.8128,7309.8133,7135.8146,7198.8131,7020.8164,7228.8138,7208.8142,7151.8167,7031.818,7171.8149,7290.8146,7140.8139,7248.8257,7321.8147,7171.816,7182.8185,7382.815,7320.8148,7269.8022,7336.8135,7067.8178,7241.8166,7295.8122,6498.7714,7197.8159,7320.8112,7269.8075,7324.8133,7300.8151,7285.818,7126.8154,7359.8136,7134.815,7109.8162,7275.813,7302.813,7082.8199,7053.7281,7285.8159,7298.8144,6294.2562,7335.8154,7130.8176,7314.8111,7321.8144,7322.7927,7306.8089,7345.8156,7357.8127,7325.8222,7330.8167,7302.8154,7148.816,7298.8115,7310.819,7350.8045,7152.815,7299.8148,7150.8147,7311.8163,7047.8172,7316.8137,7283.8179,7085.8173,7335.8182,7344.8127,7147.8244,7300.8037,7349.8129,7299.8052,7488.3434,7306.8117,7307.8118,7056.8186,7086.8255,7370.8122,7278.8113,7355.812,7350.8132,7343.8089,7211.8183,7160.8144,7089.8153,7328.7957,7320.8141,7314.8117,7330.8037,6996.8171,7397.8144,7396.8111,7182.8138,7400.8114,7362.8147,7334.8056,7361.3315,6937.8175,7365.8147,6935.8161,7398.8123,7358.8137,7072.8181,7361.8138,7393.3328,7342.8142,7380.3328,7396.3297,7365.3335,7019.3329,7378.8137,7317.8146,7405.3329,7380.3344,7370.3295,6940.8108,7371.3381,7001.3373,7413.8144,7110.3342,7383.3255,7363.3322,7380.3332,7237.3371,7347.8127,7024.3354,7074.8175,7434.3344,7371.3381,7094.336,7313.8132,6960.3349,7417.3512,7402.3332,6989.8178,7333.8122,7031.808,7015.3344,7406.3363,7370.3322,7015.3334,7377.3319,6967.3457,7001.3373,7386.3284,7402.3337,7202.8133,7358.3418,7378.3331,6938.814,7378.3331,7097.3331,7368.3306,7033.3354,7388.3342,7224.3414,6972.3391,7360.3319,7226.3324,7235.3343,7402.3332,7373.3544,7038.3552,7392.3317,7216.3358,7367.3337,7362.3231,7397.3359,6608.7756,7368.8151,7294.813,7119.3366,7389.3323,7399.3329,7385.3312,7369.332,7407.335,7410.3546,6696.7762,6519.7764,6225.2615,7196.3298,7374.3343,7422.3302,7221.8153,7240.3326,7411.3357,7329.815,7407.3341,7385.3332,6715.7758,7397.333,7373.3336,7052.3404,7395.3328,7396.3313,7423.488,7386.332,7263.335,7391.3256,7237.3341,7190.3353,7182.3339,7381.3313,7426.3308,7402.3334,7402.333,7239.333,7423.3328,7407.3322,7426.3125,7400.33,7388.3345,7044.3353,7248.3334,7419.3344,7422.3109,6993.3348,7383.3331,7045.3319,7414.3316,6645.7768,7108.335,7423.3264,7416.3317,7423.3312,7024.3337,7412.3324,7384.331,7385.335,7407.3327,7422.3312,7400.3322,7031.3325,7040.3514,7037.3343,7027.3361,7086.3333,7401.3333,7082.335,7405.3305,7418.3298,7162.3355,7463.312,7019.336,7080.3277,7413.3322,7442.3348,7474.3315,7437.3431,7037.3407,7037.3321,7052.3379,7102.3341,7443.3327,7103.3344,7446.3313,7086.3341,7100.3368,7037.3387,7517.3352,7029.3348,7044.3314,7484.3307,7416.3337,7521.3299,7436.3443,7142.3321,7121.3342,7182.334,7080.3296,7077.3269,7489.3341,7088.3354,7141.3331,7484.334,7445.3349,7476.3335,7136.3367,7491.3339,7125.3356,7142.3313,7164.3343,7140.3313,7145.3357,7189.3341,7138.3348,7532.3328,7076.3325,7134.8064,7142.3356,7163.3318,7478.3338,7540.3381,7082.3318,7537.3327,7357.3328,7410.3318,7041.3373,7095.3337,7127.335,7399.3308,7433.3334,7529.328,7470.3342,7552.3315,7484.3321,7455.3234,7190.3343,7122.3347,7464.3308,7479.3337,7549.3311,7432.3496,7422.3359,7086.3443,7523.3299,7250.3404,7415.3308,7546.3322,7454.3327,7046.3319,7032.3329,7018.3346,7433.3321,7140.3369,7034.3327,6643.7828,7083.331,7039.3344,7177.816,7458.3336,7445.3313,7331.8107,7424.3455,7120.337,7072.3313,7420.3325,7040.3315,7038.3349,7448.3321,7450.331,7450.3309,7431.3331,7445.3429,7419.3368,7425.3334,7443.3306,7377.3332,7392.3313,7150.3363,7162.3444,7486.3326,7198.3377,7512.3329,7489.3288,7083.3305,7491.3297,7039.3436,7435.3329,7496.3327,7193.3332,7141.3345,7490.3336,7104.333,7494.3335,7495.3309,7503.3297,7121.3344,7491.3327,7139.3343,7490.3337,7472.3317,7146.3337,7077.3341,7189.3337,7442.3315,7143.3363,7143.3348,7075.3351,7483.3331,7187.3369,7488.3295,7557.3327,7123.3339,7084.3311,7088.3328,7136.3327,7079.3354,7221.3345,7211.335,7073.3354,7525.3324,7178.3371,7141.3324,7137.3373,7082.3272,7487.334,7189.3337,7485.3326,7494.3318,7218.3355,7094.3319,6482.7769,7139.3343,7128.3361,7122.3654,6296.7773,7121.3344,7524.3208,7127.3355,7185.3357,7501.3288,7482.3338,6595.7782,7185.3368,7177.336,7088.3342,6220.2579,6226.2623],404.5241,7557.3327]]};
function paintEm() {
	for (const key in collection) {
		const arr = collection[key];
		if (!arr.length) continue;
		let target = document.getElementById(arr[0][4]);
		if (target == null) {
			target = document.getElementById(key);
			//if (!target) prompt('', JSON.stringify(arr));
			let title = target.innerText;
			target.innerText = '';
			let data, labels = [];
			if (arr[0].length === 5){
				for(const multi of arr) {
					if (!data) data = multi.slice(0, 2)
					else data.push(multi[1]);
					labels.push(multi[4]);
				}
			} else {
				data = arr.pop();
				createChart(data, title, target, labels);
				let key4 = key + '.4';
				for(const smallArray of arr) if (smallArray.length === 3) {
					target = document.getElementById(key + '.' + smallArray[2]).lastChild;
					let val = smallArray[1];
					if (val < 1000) val = val.toFixed(2) + ' ms';
					else val = (val / 1000).toFixed(2) + ' s';
					target.innerText = val;
				} else if (smallArray.length === 5) {
					if (key4) {
						target = document.getElementById(key4);
						key4 = 0;
						title = target.innerText;
						target.innerText = '';
						data = smallArray.slice(0,2);
					} else data.push(smallArray[1]);
					labels.push(smallArray[4].replace(/.+\./g, ''));
				}
			}
			createChart(data, title, target, labels);
			continue;
		}
		const title = target.innerText
		target.innerText = '';
		let data = arr[0].slice(0, 2);
		createChart(data, title, target);
	}
	let divs = document.getElementsByTagName('DIV');
	for(let d of divs) {
		if (d.id && !d.childElementCount && d.innerText) d.innerText = '';
	}
}
function createChart(data, title, inside, labels) {
inside.title = JSON.stringify(data).substr(0,1000);
	let initXmin = data[0][0];
	let initXmax = data[0][data[0].length - 1];

	let rangerOpts = {
		title: title,
		width: 450,
		height: 100,
		cursor: {
			y: false,
			points: {
				show: false,
			},
			drag: {
				setScale: false,
				x: true,
				y: false,
			},
			sync: {
				key: "vus"
			}
		},
		legend: {
			show: false
		},
		scales: {
			x: {
				time: true,
			},
		},
		series: [
			{},
			{
				label: " ",
				stroke: "#7eb26d",
			}
		],
		hooks: {
			ready: [
				uRanger => {
					let left = Math.round(uRanger.valToPos(initXmin, 'x'));
					let width = Math.round(uRanger.valToPos(initXmax, 'x')) - left;
					let height = uRanger.bbox.height / devicePixelRatio;
					uRanger.setSelect({ left, width, height }, false);
				}
			]
		},
		axes: [
			{
				scale: "mb",
				values: (self, ticks) => ticks.map(rawValue => new Date(rawValue).toLocaleTimeString()),
			},
			{
				values: (self, ticks) => ticks.map(rawValue => rawValue.toFixed(0)),
				side: 1,
				grid: { show: true },
			},
		],
	};

	let zoomedOpts = {
		width: 450,
		height: 250,
		cursor: {
			drag: {
				x: true,
				y: false
			},
			sync: {
				key: "vus"
			}
		},
		scales: {
			x: {
				time: true
			},
		},
		series: [
			{},
			{
				stroke: "#7eb26d",
			}
		],
		axes: [
			{
				scale: "mb",
				values: (self, ticks) => {
					let x = ticks.map(rawValue => {
						let exactFrac = rawValue.toString()
							.substr(10)
							.replace(/\./, '')
							.replace(/0+$/, '');
						if (exactFrac) exactFrac = '.' + exactFrac;
						return new Date(rawValue).toLocaleTimeString().substr(6) + exactFrac;
					})
					return x;
				}
			},
			{
				values: (self, ticks) => ticks.map(rawValue => rawValue.toFixed(0)),
				side: 1,
				grid: { show: true },
			},
		],
	};
	rangerOpts.cursor.sync.key = title;
	zoomedOpts.cursor.sync.key = title;
	const colors = ["#7EB26D", "#EAB839", "#6ED0E0", "#EF843C"];
	for(let l in labels) {
		let nxt = (l === '0')?rangerOpts.series[1]:{stroke: colors[l]};
		nxt.label = labels[l].replace(/\..+/g, '');
		if (l!=='0') {
			rangerOpts.series.push(nxt);
			zoomedOpts.series.push(nxt);
		}
	}

	let uRanger = new uPlot(rangerOpts, data, inside);
	let uZoomed = new uPlot(zoomedOpts, data, inside);
}
/**
* Copyright (c) 2020, Leon Sorokin
* All rights reserved. (MIT Licensed)
*
* uPlot.js (μPlot)
* A small, fast chart for time series, lines, areas, ohlc & bars
* https://github.com/leeoniya/uPlot (v1.1.0)
*/

var uPlot = (function () {
	'use strict';

	function debounce(fn, time) {
		var pending = null;

		function run() {
			pending = null;
			fn();
		}

		return function() {
			clearTimeout(pending);
			pending = setTimeout(run, time);
		}
	}

	// binary search for index of closest value
	function closestIdx(num, arr, lo, hi) {
		var mid;
		lo = lo || 0;
		hi = hi || arr.length - 1;
		var bitwise = hi <= 2147483647;

		while (hi - lo > 1) {
			mid = bitwise ? (lo + hi) >> 1 : floor((lo + hi) / 2);

			if (arr[mid] < num)
				{ lo = mid; }
			else
				{ hi = mid; }
		}

		if (num - arr[lo] <= arr[hi] - num)
			{ return lo; }

		return hi;
	}

	function getMinMax(data, _i0, _i1, sorted) {
	//	console.log("getMinMax()");

		var _min = inf;
		var _max = -inf;

		if (sorted == 1) {
			_min = data[_i0];
			_max = data[_i1];
		}
		else if (sorted == -1) {
			_min = data[_i1];
			_max = data[_i0];
		}
		else {
			for (var i = _i0; i <= _i1; i++) {
				if (data[i] != null) {
					_min = min(_min, data[i]);
					_max = max(_max, data[i]);
				}
			}
		}

		return [_min, _max];
	}

	function rangeLog(min, max, fullMags) {
		if (fullMags) {
			min = pow(10, floor(log10(min)));
			max = pow(10,  ceil(log10(max)));
		}
		else {
			var minMag = pow(10, floor(log10(min)));
			min = incrRoundDn(min, minMag);
			var maxMag = pow(10, floor(log10(max)));
			max = incrRoundUp(max, maxMag);
		}

		return [+min.toFixed(12), +max.toFixed(12)];
	}

	// this ensures that non-temporal/numeric y-axes get multiple-snapped padding added above/below
	// TODO: also account for incrs when snapping to ensure top of axis gets a tick & value
	function rangeNum(min, max, mult, extra) {
		// auto-scale Y
		var delta = max - min;
		var nonZeroDelta = delta || abs(max) || 1e3;
		var mag = log10(nonZeroDelta);
		var base = pow(10, floor(mag));

		var padding = nonZeroDelta * mult;
		var newMin = min - padding;
		var newMax = max + padding;

		var snappedMin = round6(incrRoundDn(newMin, base/100));
		var snappedMax = round6(incrRoundUp(newMax, base/100));

		if (extra) {
			// for flat data, always use 0 as one chart extreme & place data in center
			if (delta == 0) {
				if (max > 0)
					{ snappedMin = 0; }
				else if (max < 0)
					{ snappedMax = 0; }
			}
			else {
				// if original data never crosses 0, use 0 as one chart extreme
				if (min >= 0 && snappedMin < 0)
					{ snappedMin = 0; }

				if (max <= 0 && snappedMax > 0)
					{ snappedMax = 0; }
			}
		}

		return [snappedMin, snappedMax];
	}

	// alternative: https://stackoverflow.com/a/2254896
	var fmtNum = new Intl.NumberFormat(navigator.language).format;

	var M = Math;

	var abs = M.abs;
	var floor = M.floor;
	var round = M.round;
	var ceil = M.ceil;
	var min = M.min;
	var max = M.max;
	var pow = M.pow;
	var log10 = M.log10;
	var PI = M.PI;

	var inf = Infinity;

	function incrRound(num, incr) {
		return round(num/incr)*incr;
	}

	function clamp(num, _min, _max) {
		return min(max(num, _min), _max);
	}

	function fnOrSelf(v) {
		return typeof v == "function" ? v : function () { return v; };
	}

	function incrRoundUp(num, incr) {
		return ceil(num/incr)*incr;
	}

	function incrRoundDn(num, incr) {
		return floor(num/incr)*incr;
	}

	function round3(val) {
		return round(val * 1e3) / 1e3;
	}

	function round6(val) {
		return round(val * 1e6) / 1e6;
	}

	function genIncrs(minExp, maxExp, mults) {
		var incrs = [];

		for (var exp = minExp; exp < maxExp; exp++) {
			var mag = pow(10, exp);
			for (var i = 0; i < mults.length; i++) {
				var incr = mults[i] * mag;
				incrs.push(+incr.toFixed(abs(exp)));
			}
		}

		return incrs;
	}

	//export const assign = Object.assign;

	var isArr = Array.isArray;

	function isStr(v) {
		return typeof v === 'string';
	}

	function isObj(v) {
		return typeof v === 'object' && v !== null;
	}

	function copy(o) {
		var out;

		if (isArr(o))
			{ out = o.map(copy); }
		else if (isObj(o)) {
			out = {};
			for (var k in o)
				{ out[k] = copy(o[k]); }
		}
		else
			{ out = o; }

		return out;
	}

	function assign(targ) {
		var args = arguments;

		for (var i = 1; i < args.length; i++) {
			var src = args[i];

			for (var key in src) {
				if (isObj(targ[key]))
					{ assign(targ[key], copy(src[key])); }
				else
					{ targ[key] = copy(src[key]); }
			}
		}

		return targ;
	}

	var WIDTH = "width";
	var HEIGHT = "height";
	var TOP = "top";
	var BOTTOM = "bottom";
	var LEFT = "left";
	var RIGHT = "right";
	var firstChild = "firstChild";
	var createElement = "createElement";
	var hexBlack = "#000";
	var classList = "classList";

	var mousemove = "mousemove";
	var mousedown = "mousedown";
	var mouseup = "mouseup";
	var mouseenter = "mouseenter";
	var mouseleave = "mouseleave";
	var dblclick = "dblclick";
	var resize = "resize";
	var scroll = "scroll";

	var pre = "u-";

	var UPLOT          =       "uplot";
	var TITLE          = pre + "title";
	var WRAP           = pre + "wrap";
	var UNDER          = pre + "under";
	var OVER           = pre + "over";
	var OFF            = pre + "off";
	var SELECT         = pre + "select";
	var CURSOR_X       = pre + "cursor-x";
	var CURSOR_Y       = pre + "cursor-y";
	var CURSOR_PT      = pre + "cursor-pt";
	var LEGEND         = pre + "legend";
	var LEGEND_LIVE    = pre + "live";
	var LEGEND_INLINE  = pre + "inline";
	var LEGEND_THEAD   = pre + "thead";
	var LEGEND_SERIES  = pre + "series";
	var LEGEND_MARKER  = pre + "marker";
	var LEGEND_LABEL   = pre + "label";
	var LEGEND_VALUE   = pre + "value";

	var rAF = requestAnimationFrame;
	var doc = document;
	var win = window;
	var pxRatio = devicePixelRatio;

	function addClass(el, c) {
		c != null && el[classList].add(c);
	}

	function remClass(el, c) {
		el[classList].remove(c);
	}

	function setStylePx(el, name, value) {
		el.style[name] = value + "px";
	}

	function placeTag(tag, cls, targ, refEl) {
		var el = doc[createElement](tag);

		if (cls != null)
			{ addClass(el, cls); }

		if (targ != null)
			{ targ.insertBefore(el, refEl); }

		return el;
	}

	function placeDiv(cls, targ) {
		return placeTag("div", cls, targ);
	}

	function trans(el, xPos, yPos) {
		el.style.transform = "translate(" + xPos + "px," + yPos + "px)";
	}

	var evOpts = {passive: true};

	function on(ev, el, cb) {
		el.addEventListener(ev, cb, evOpts);
	}

	function off(ev, el, cb) {
		el.removeEventListener(ev, cb, evOpts);
	}

	var months = [
		"January",
		"February",
		"March",
		"April",
		"May",
		"June",
		"July",
		"August",
		"September",
		"October",
		"November",
		"December" ];

	var days = [
		"Sunday",
		"Monday",
		"Tuesday",
		"Wednesday",
		"Thursday",
		"Friday",
		"Saturday" ];

	function slice3(str) {
		return str.slice(0, 3);
	}

	var days3 =  days.map(slice3);

	var months3 =  months.map(slice3);

	var engNames = {
		MMMM: months,
		MMM:  months3,
		WWWW: days,
		WWW:  days3,
	};

	function zeroPad2(int) {
		return (int < 10 ? '0' : '') + int;
	}

	function zeroPad3(int) {
		return (int < 10 ? '00' : int < 100 ? '0' : '') + int;
	}

	/*
	function suffix(int) {
		let mod10 = int % 10;

		return int + (
			mod10 == 1 && int != 11 ? "st" :
			mod10 == 2 && int != 12 ? "nd" :
			mod10 == 3 && int != 13 ? "rd" : "th"
		);
	}
	*/

	var getFullYear = 'getFullYear';
	var getMonth = 'getMonth';
	var getDate = 'getDate';
	var getDay = 'getDay';
	var getHours = 'getHours';
	var getMinutes = 'getMinutes';
	var getSeconds = 'getSeconds';
	var getMilliseconds = 'getMilliseconds';

	var subs = {
		// 2019
		YYYY:	function (d) { return d[getFullYear](); },
		// 19
		YY:		function (d) { return (d[getFullYear]()+'').slice(2); },
		// July
		MMMM:	function (d, names) { return names.MMMM[d[getMonth]()]; },
		// Jul
		MMM:	function (d, names) { return names.MMM[d[getMonth]()]; },
		// 07
		MM:		function (d) { return zeroPad2(d[getMonth]()+1); },
		// 7
		M:		function (d) { return d[getMonth]()+1; },
		// 09
		DD:		function (d) { return zeroPad2(d[getDate]()); },
		// 9
		D:		function (d) { return d[getDate](); },
		// Monday
		WWWW:	function (d, names) { return names.WWWW[d[getDay]()]; },
		// Mon
		WWW:	function (d, names) { return names.WWW[d[getDay]()]; },
		// 03
		HH:		function (d) { return zeroPad2(d[getHours]()); },
		// 3
		H:		function (d) { return d[getHours](); },
		// 9 (12hr, unpadded)
		h:		function (d) {var h = d[getHours](); return h == 0 ? 12 : h > 12 ? h - 12 : h;},
		// AM
		AA:		function (d) { return d[getHours]() >= 12 ? 'PM' : 'AM'; },
		// am
		aa:		function (d) { return d[getHours]() >= 12 ? 'pm' : 'am'; },
		// a
		a:		function (d) { return d[getHours]() >= 12 ? 'p' : 'a'; },
		// 09
		mm:		function (d) { return zeroPad2(d[getMinutes]()); },
		// 9
		m:		function (d) { return d[getMinutes](); },
		// 09
		ss:		function (d) { return zeroPad2(d[getSeconds]()); },
		// 9
		s:		function (d) { return d[getSeconds](); },
		// 374
		fff:	function (d) { return zeroPad3(d[getMilliseconds]()); },
	};

	function fmtDate(tpl, names) {
		names = names || engNames;
		var parts = [];

		var R = /\{([a-z]+)\}|[^{]+/gi, m;

		while (m = R.exec(tpl))
			{ parts.push(m[0][0] == '{' ? subs[m[1]] : m[0]); }

		return function (d) {
			var out = '';

			for (var i = 0; i < parts.length; i++)
				{ out += typeof parts[i] == "string" ? parts[i] : parts[i](d, names); }

			return out;
		}
	}

	var localTz = new Intl.DateTimeFormat().resolvedOptions().timeZone;

	// https://stackoverflow.com/questions/15141762/how-to-initialize-a-javascript-date-to-a-particular-time-zone/53652131#53652131
	function tzDate(date, tz) {
		var date2;

		// perf optimization
		if (tz == 'Etc/UTC')
			{ date2 = new Date(+date + date.getTimezoneOffset() * 6e4); }
		else if (tz == localTz)
			{ date2 = date; }
		else {
			date2 = new Date(date.toLocaleString('en-US', {timeZone: tz}));
			date2.setMilliseconds(date[getMilliseconds]());
		}

		return date2;
	}

	//export const series = [];

	// default formatters:

	var incrMults = [1,2,5];

	var decIncrs = genIncrs(-16, 0, incrMults);

	var intIncrs = genIncrs(0, 16, incrMults);

	var numIncrs = decIncrs.concat(intIncrs);

	var s = 1,
		m = 60,
		h = m * m,
		d = h * 24,
		mo = d * 30,
		y = d * 365;

	// starting below 1e-3 is a hack to allow the incr finder to choose & bail out at incr < 1ms
	var timeIncrs =  [5e-4].concat(genIncrs(-3, 0, incrMults), [
		// minute divisors (# of secs)
		1,
		5,
		10,
		15,
		30,
		// hour divisors (# of mins)
		m,
		m * 5,
		m * 10,
		m * 15,
		m * 30,
		// day divisors (# of hrs)
		h,
		h * 2,
		h * 3,
		h * 4,
		h * 6,
		h * 8,
		h * 12,
		// month divisors TODO: need more?
		d,
		d * 2,
		d * 3,
		d * 4,
		d * 5,
		d * 6,
		d * 7,
		d * 8,
		d * 9,
		d * 10,
		d * 15,
		// year divisors (# months, approx)
		mo,
		mo * 2,
		mo * 3,
		mo * 4,
		mo * 6,
		// century divisors
		y,
		y * 2,
		y * 5,
		y * 10,
		y * 25,
		y * 50,
		y * 100 ]);

	function timeAxisStamps(stampCfg, fmtDate) {
		return stampCfg.map(function (s) { return [
			s[0],
			fmtDate(s[1]),
			s[2],
			fmtDate(s[4] ? s[1] + s[3] : s[3]) ]; });
	}

	var yyyy = "{YYYY}";
	var NLyyyy = "\n" + yyyy;
	var md = "{M}/{D}";
	var NLmd = "\n" + md;

	var aa = "{aa}";
	var hmm = "{h}:{mm}";
	var hmmaa = hmm + aa;
	var ss = ":{ss}";

	// [0]: minimum num secs in the tick incr
	// [1]: normal tick format
	// [2]: when a differing <x> is encountered - 1: sec, 2: min, 3: hour, 4: day, 5: week, 6: month, 7: year
	// [3]: use a longer more contextual format
	// [4]: modes: 0: replace [1] -> [3], 1: concat [1] + [3]
	var _timeAxisStamps = [
		[y,        yyyy,            7,   "",                    1],
		[d * 28,   "{MMM}",         7,   NLyyyy,                1],
		[d,        md,              7,   NLyyyy,                1],
		[h,        "{h}" + aa,      4,   NLmd,                  1],
		[m,        hmmaa,           4,   NLmd,                  1],
		[s,        ss,              2,   NLmd  + " " + hmmaa,   1],
		[1e-3,     ss + ".{fff}",   2,   NLmd  + " " + hmmaa,   1] ];

	// TODO: will need to accept spaces[] and pull incr into the loop when grid will be non-uniform, eg for log scales.
	// currently we ignore this for months since they're *nearly* uniform and the added complexity is not worth it
	function timeAxisVals(tzDate, stamps) {
		return function (self, splits, axisIdx, foundSpace, foundIncr) {
			var s = stamps.find(function (e) { return foundIncr >= e[0]; }) || stamps[stamps.length - 1];

			// these track boundaries when a full label is needed again
			var prevYear = null;
			var prevDate = null;
			var prevMinu = null;

			return splits.map(function (split, i) {
				var date = tzDate(split);

				var newYear = date[getFullYear]();
				var newDate = date[getDate]();
				var newMinu = date[getMinutes]();

				var diffYear = newYear != prevYear;
				var diffDate = newDate != prevDate;
				var diffMinu = newMinu != prevMinu;

				var stamp = s[2] == 7 && diffYear || s[2] == 4 && diffDate || s[2] == 2 && diffMinu ? s[3] : s[1];

				prevYear = newYear;
				prevDate = newDate;
				prevMinu = newMinu;

				return stamp(date);
			});
		}
	}

	function mkDate(y, m, d) {
		return new Date(y, m, d);
	}

	// the ensures that axis ticks, values & grid are aligned to logical temporal breakpoints and not an arbitrary timestamp
	// https://www.timeanddate.com/time/dst/
	// https://www.timeanddate.com/time/dst/2019.html
	// https://www.epochconverter.com/timezones
	function timeAxisSplits(tzDate) {
		return function (self, axisIdx, scaleMin, scaleMax, foundIncr, foundSpace) {
			var splits = [];
			var isMo = foundIncr >= mo && foundIncr < y;

			// get the timezone-adjusted date
			var minDate = tzDate(scaleMin);
			var minDateTs = minDate / 1e3;

			// get ts of 12am (this lands us at or before the original scaleMin)
			var minMin = mkDate(minDate[getFullYear](), minDate[getMonth](), isMo ? 1 : minDate[getDate]());
			var minMinTs = minMin / 1e3;

			if (isMo) {
				var moIncr = foundIncr / mo;
			//	let tzOffset = scaleMin - minDateTs;		// needed?
				var split = minDateTs == minMinTs ? minDateTs : mkDate(minMin[getFullYear](), minMin[getMonth]() + moIncr, 1) / 1e3;
				var splitDate = new Date(split * 1e3);
				var baseYear = splitDate[getFullYear]();
				var baseMonth = splitDate[getMonth]();

				for (var i = 0; split <= scaleMax; i++) {
					var next = mkDate(baseYear, baseMonth + moIncr * i, 1);
					var offs = next - tzDate(next / 1e3);

					split = (+next + offs) / 1e3;

					if (split <= scaleMax)
						{ splits.push(split); }
				}
			}
			else {
				var incr0 = foundIncr >= d ? d : foundIncr;
				var tzOffset = floor(scaleMin) - floor(minDateTs);
				var split$1 = minMinTs + tzOffset + incrRoundUp(minDateTs - minMinTs, incr0);
				splits.push(split$1);

				var date0 = tzDate(split$1);

				var prevHour = date0[getHours]() + (date0[getMinutes]() / m) + (date0[getSeconds]() / h);
				var incrHours = foundIncr / h;

				var minSpace = self.axes[axisIdx].space();		// TOFIX: only works for static space:
				var pctSpace = foundSpace / minSpace;

				while (1) {
					split$1 = round3(split$1 + foundIncr);

					var expectedHour = floor(round6(prevHour + incrHours)) % 24;
					var splitDate$1 = tzDate(split$1);
					var actualHour = splitDate$1.getHours();

					var dstShift = actualHour - expectedHour;

					if (dstShift > 1)
						{ dstShift = -1; }

					split$1 -= dstShift * h;

					if (split$1 > scaleMax)
						{ break; }

					prevHour = (prevHour + incrHours) % 24;

					// add a tick only if it's further than 70% of the min allowed label spacing
					var prevSplit = splits[splits.length - 1];
					var pctIncr = round3((split$1 - prevSplit) / foundIncr);

					if (pctIncr * pctSpace >= .7)
						{ splits.push(split$1); }
				}
			}

			return splits;
		}
	}

	function timeSeriesStamp(stampCfg, fmtDate) {
		return fmtDate(stampCfg);
	}
	var _timeSeriesStamp = '{YYYY}-{MM}-{DD} {h}:{mm}{aa}';

	function timeSeriesVal(tzDate, stamp) {
		return function (self, val) {
			let exactFrac = val.toString()
				.substr(10)
				.replace(/\./, '')
				.replace(/0+$/, '');
			if (exactFrac) exactFrac = '.' + exactFrac;
			return new Date(val).toLocaleTimeString() + exactFrac;
		};
	}

	function cursorPoint(self, si) {
		var s = self.series[si];

		var pt = placeDiv();

		pt.style.background = s.stroke || hexBlack;

		var dia = ptDia(s.width, 1);
		var mar = (dia - 1) / -2;

		setStylePx(pt, WIDTH, dia);
		setStylePx(pt, HEIGHT, dia);
		setStylePx(pt, "marginLeft", mar);
		setStylePx(pt, "marginTop", mar);

		return pt;
	}

	function dataIdx(self, seriesIdx, cursorIdx) {
		return cursorIdx;
	}

	var cursorOpts = {
		show: true,
		x: true,
		y: true,
		lock: false,
		points: {
			show: cursorPoint,
		},

		drag: {
			setScale: true,
			x: true,
			y: false,
			dist: 0,
			uni: null,
			_x: false,
			_y: false,
		},

		focus: {
			prox: -1,
		},

		locked: false,
		left: -10,
		top: -10,
		idx: null,
		dataIdx: dataIdx,
	};

	var grid = {
		show: true,
		stroke: "rgba(0,0,0,0.07)",
		width: 2,
	//	dash: [],
	};

	var ticks = assign({}, grid, {size: 10});

	var font      = '12px system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"';
	var labelFont = "bold " + font;
	var lineMult = 1.5;		// font-size multiplier

	var xAxisOpts = {
		show: true,
		scale: "x",
		space: 50,
		gap: 5,
		size: 50,
		labelSize: 30,
		labelFont: labelFont,
		side: 2,
	//	class: "x-vals",
	//	incrs: timeIncrs,
	//	values: timeVals,
		grid: grid,
		ticks: ticks,
		font: font,
		rotate: 0,
	};

	var numSeriesLabel = "Value";
	var timeSeriesLabel = "Time";

	var xSeriesOpts = {
		show: true,
		scale: "x",
		sorted: 1,
	//	label: "Time",
	//	value: v => stamp(new Date(v * 1e3)),

		// internal caches
		min: inf,
		max: -inf,
		idxs: [],
	};

	function numAxisVals(self, splits, axisIdx, foundSpace, foundIncr) {
		return splits.map(fmtNum);
	}

	function numAxisSplits(self, axisIdx, scaleMin, scaleMax, foundIncr, foundSpace, forceMin) {
		var splits = [];

		scaleMin = forceMin ? scaleMin : +incrRoundUp(scaleMin, foundIncr).toFixed(12);

		for (var val = scaleMin; val <= scaleMax; val = +(val + foundIncr).toFixed(12))
			{ splits.push(val); }

		return splits;
	}

	function logAxisSplits(self, axisIdx, scaleMin, scaleMax, foundIncr, foundSpace, forceMin) {
		var splits = [];

		foundIncr = pow(10, floor(log10(scaleMin)));

		var split = scaleMin;

		do {
			splits.push(split);
			split = +(split + foundIncr).toFixed(12);
			if (split >= foundIncr * 10)
				{ foundIncr = split; }
		} while (split <= scaleMax);

		return splits;
	}

	var RE_ALL   = /./;
	var RE_12357 = /[12357]/;
	var RE_125   = /[125]/;
	var RE_1     = /1/;

	function logAxisVals(self, splits, axisIdx, foundSpace, foundIncr) {
		var axis = self.axes[axisIdx];
		var scaleKey = axis.scale;
		var valToPos = self.valToPos;

		var minSpace = axis.space();			// TOFIX: only works for static space:

		var _10 = valToPos(10, scaleKey);

		var re = (
			valToPos(9,  scaleKey) - _10 >= minSpace ? RE_ALL :
			valToPos(7,  scaleKey) - _10 >= minSpace ? RE_12357 :
			valToPos(5,  scaleKey) - _10 >= minSpace ? RE_125 :
			RE_1
		);

		return splits.map(function (v) { return re.test(v) ? fmtNum(v) : ""; });
	}

	function numSeriesVal(self, val) {
		return fmtNum(val);
	}

	var yAxisOpts = {
		show: true,
		scale: "y",
		space: 40,
		gap: 5,
		size: 50,
		labelSize: 30,
		labelFont: labelFont,
		side: 3,
	//	class: "y-vals",
	//	incrs: numIncrs,
	//	values: (vals, space) => vals,
		grid: grid,
		ticks: ticks,
		font: font,
		rotate: 0,
	};

	// takes stroke width
	function ptDia(width, mult) {
		var dia = 3 + (width || 1) * 2;
		return round3(dia * mult);
	}

	function seriesPoints(self, si) {
		var dia = ptDia(self.series[si].width, pxRatio);
		var maxPts = self.bbox.width / dia / 2;
		var idxs = self.series[0].idxs;
		return idxs[1] - idxs[0] <= maxPts;
	}

	var ySeriesOpts = {
		scale: "y",
		sorted: 0,
		show: true,
		band: false,
		spanGaps: false,
		alpha: 1,
		points: {
			show: seriesPoints,
		//	stroke: "#000",
		//	fill: "#fff",
		//	width: 1,
		//	size: 10,
		},
	//	label: "Value",
	//	value: v => v,
		values: null,

		// internal caches
		min: inf,
		max: -inf,
		idxs: [],

		path: null,
		clip: null,
	};

	var xScaleOpts = {
		time: true,
		auto: true,
		distr: 1,
		min: null,
		max: null,
	};

	var yScaleOpts = assign({}, xScaleOpts, {
		time: false,
	});

	var syncs = {};

	function _sync(opts) {
		var clients = [];

		return {
			sub: function sub(client) {
				clients.push(client);
			},
			unsub: function unsub(client) {
				clients = clients.filter(function (c) { return c != client; });
			},
			pub: function pub(type, self, x, y, w, h, i) {
				if (clients.length > 1) {
					clients.forEach(function (client) {
						client != self && client.pub(type, self, x, y, w, h, i);
					});
				}
			}
		};
	}

	function setDefaults(d, xo, yo, initY) {
		var d2 = initY ? [d[0], d[1]].concat(d.slice(2)) : [d[0]].concat(d.slice(1));
		return d2.map(function (o, i) { return setDefault(o, i, xo, yo); });
	}

	function setDefault(o, i, xo, yo) {
		return assign({}, (i == 0 || o && o.side % 2 == 0 ? xo : yo), o);
	}

	function getValPct(val, scale) {
		return (
			scale.distr == 3
			? log10(val / scale.min) / log10(scale.max / scale.min)
			: (val - scale.min) / (scale.max - scale.min)
		);
	}

	function getYPos(val, scale, hgt, top) {
		var pctY = getValPct(val, scale);
		return top + (1 - pctY) * hgt;
	}

	function getXPos(val, scale, wid, lft) {
		var pctX = getValPct(val, scale);
		return lft + pctX * wid;
	}

	function snapTimeX(self, dataMin, dataMax) {
		return [dataMin, dataMax > dataMin ? dataMax : dataMax + 86400];
	}

	function snapNumX(self, dataMin, dataMax) {
		var delta = dataMax - dataMin;

		if (delta == 0) {
			var mag = log10(delta || abs(dataMax) || 1);
			var exp = floor(mag) + 1;
			return [dataMin, incrRoundUp(dataMax, pow(10, exp))];
		}
		else
			{ return [dataMin, dataMax]; }
	}

	// this ensures that non-temporal/numeric y-axes get multiple-snapped padding added above/below
	// TODO: also account for incrs when snapping to ensure top of axis gets a tick & value
	function snapNumY(self, dataMin, dataMax) {
		return rangeNum(dataMin, dataMax, 0.1, true);
	}

	function snapLogX(self, dataMin, dataMax) {
		return rangeLog(dataMin, dataMax);
	}

	function snapLogY(self, dataMin, dataMax) {
		return rangeLog(dataMin, dataMax);
	}

	// dim is logical (getClientBoundingRect) pixels, not canvas pixels
	function findIncr(valDelta, incrs, dim, minSpace) {
		var pxPerUnit = dim / valDelta;

		for (var i = 0; i < incrs.length; i++) {
			var space = incrs[i] * pxPerUnit;

			if (space >= minSpace)
				{ return [incrs[i], space]; }
		}
	}

	function filtMouse(e) {
		return e.button == 0;
	}

	function pxRatioFont(font) {
		var fontSize;
		font = font.replace(/\d+/, function (m) { return (fontSize = round(m * pxRatio)); });
		return [font, fontSize];
	}

	function uPlot(opts, data, then) {
		var self = {};

		var root = self.root = placeDiv(UPLOT);

		if (opts.id != null)
			{ root.id = opts.id; }

		addClass(root, opts.class);

		if (opts.title) {
			var title = placeDiv(TITLE, root);
			title.textContent = opts.title;
		}

		var can = placeTag("canvas");
		var ctx = self.ctx = can.getContext("2d");

		var wrap = placeDiv(WRAP, root);
		var under = placeDiv(UNDER, wrap);
		wrap.appendChild(can);
		var over = placeDiv(OVER, wrap);

		opts = copy(opts);

		(opts.plugins || []).forEach(function (p) {
			if (p.opts)
				{ opts = p.opts(self, opts) || opts; }
		});

		var ready = false;

		var series  = self.series = setDefaults(opts.series || [], xSeriesOpts, ySeriesOpts, false);
		var axes    = self.axes   = setDefaults(opts.axes   || [], xAxisOpts,   yAxisOpts,    true);
		var scales  = self.scales = assign({}, {x: xScaleOpts, y: yScaleOpts}, opts.scales);

		var gutters = assign({
			x: round(yAxisOpts.size / 2),
			y: round(xAxisOpts.size / 3),
		}, opts.gutters);

	//	self.tz = opts.tz || Intl.DateTimeFormat().resolvedOptions().timeZone;
		var _tzDate  =  (opts.tzDate || (function (ts) { return new Date(ts * 1e3); }));
		var _fmtDate =  (opts.fmtDate || fmtDate);

		var _timeAxisSplits =  timeAxisSplits(_tzDate);
		var _timeAxisVals   =  timeAxisVals(_tzDate, timeAxisStamps(_timeAxisStamps, _fmtDate));
		var _timeSeriesVal  =  timeSeriesVal(_tzDate, timeSeriesStamp(_timeSeriesStamp, _fmtDate));

		var pendScales = {};

		// explicitly-set initial scales
		for (var k in scales) {
			var sc = scales[k];

			if (sc.min != null || sc.max != null)
				{ pendScales[k] = {min: sc.min, max: sc.max}; }
		}

		var legend     =  assign({show: true, live: true}, opts.legend);
		var showLegend =  legend.show;

		var legendEl;
		var legendRows = [];
		var legendCols;
		var multiValLegend = false;

		if (showLegend) {
			legendEl = placeTag("table", LEGEND, root);

			var getMultiVals = series[1] ? series[1].values : null;
			multiValLegend = getMultiVals != null;

			if (multiValLegend) {
				var head = placeTag("tr", LEGEND_THEAD, legendEl);
				placeTag("th", null, head);
				legendCols = getMultiVals(self, 1, 0);

				for (var key in legendCols)
					{ placeTag("th", LEGEND_LABEL, head).textContent = key; }
			}
			else {
				legendCols = {_: 0};
				if (series.length > 2) addClass(legendEl, LEGEND_INLINE);
				legend.live && addClass(legendEl, LEGEND_LIVE);
			}
		}

		function initLegendRow(s, i) {
			if (i == 0 && (multiValLegend || !legend.live))
				{ return null; }

			var _row = [];

			var row = placeTag("tr", LEGEND_SERIES, legendEl, legendEl.childNodes[i]);

			addClass(row, s.class);

			if (!s.show)
				{ addClass(row, OFF); }

			var label = placeTag("th", null, row);

			var indic = placeDiv(LEGEND_MARKER, label);
			s.width && (indic.style.borderColor = s.stroke);
			indic.style.backgroundColor = s.fill;

			var text = placeDiv(LEGEND_LABEL, label);
			text.textContent = s.label;

			if (i > 0) {
				on("click", label, function (e) {
					if ( cursor.locked)
						{ return; }

					filtMouse(e) && setSeries(series.indexOf(s), {show: !s.show},  syncOpts.setSeries);
				});

				if (cursorFocus) {
					on(mouseenter, label, function (e) {
						if (cursor.locked)
							{ return; }

						setSeries(series.indexOf(s), {focus: true}, syncOpts.setSeries);
					});
				}
			}

			for (var key in legendCols) {
				var v = placeTag("td", LEGEND_VALUE, row);
				v.textContent = "--";
				_row.push(v);
			}

			return _row;
		}

		var cursor =  (self.cursor = assign({}, cursorOpts, opts.cursor));

		 (cursor.points.show = fnOrSelf(cursor.points.show));

		var focus = self.focus = assign({}, opts.focus || {alpha: 0.3},  cursor.focus);
		var cursorFocus =  focus.prox >= 0;

		// series-intersection markers
		var cursorPts = [null];

		function initCursorPt(s, si) {
			if (si > 0) {
				var pt = cursor.points.show(self, si);

				if (pt) {
					addClass(pt, CURSOR_PT);
					addClass(pt, s.class);
					trans(pt, -10, -10);
					over.insertBefore(pt, cursorPts[si]);

					return pt;
				}
			}
		}

		function initSeries(s, i) {
			// init scales & defaults
			var scKey = s.scale;

			var sc = scales[scKey] = assign({}, (i == 0 ? xScaleOpts : yScaleOpts), scales[scKey]);

			var isTime =  sc.time;
			var isLog  = sc.distr == 3;

			sc.range = fnOrSelf(sc.range || (isTime ? snapTimeX : i == 0 ? (isLog ? snapLogX : snapNumX) : (isLog ? snapLogY : snapNumY)));

			var sv = s.value;
			s.value = isTime ? (isStr(sv) ? timeSeriesVal(_tzDate, timeSeriesStamp(sv, _fmtDate)) : sv || _timeSeriesVal) : sv || numSeriesVal;
			s.label = s.label || (isTime ? timeSeriesLabel : numSeriesLabel);

			if (i > 0) {
				s.width = s.width == null ? 1 : s.width;
				s.paths = s.paths || ( buildPaths);
				var _ptDia = ptDia(s.width, 1);
				s.points = assign({}, {
					size: _ptDia,
					width: max(1, _ptDia * .2),
				}, s.points);
				s.points.show = fnOrSelf(s.points.show);
				s._paths = null;
			}

			if (showLegend)
				{ legendRows.splice(i, 0, initLegendRow(s, i)); }

			if ( cursor.show) {
				var pt = initCursorPt(s, i);
				pt && cursorPts.splice(i, 0, pt);
			}
		}

		function addSeries(opts, si) {
			si = si == null ? series.length : si;

			opts = setDefault(opts, si, xSeriesOpts, ySeriesOpts);
			series.splice(si, 0, opts);
			initSeries(series[si], si);
		}

		self.addSeries = addSeries;

		function delSeries(i) {
			series.splice(i, 1);
			 showLegend && legendRows.splice(i, 1)[0][0].parentNode.remove();
			 cursorPts.length > 1 && cursorPts.splice(i, 1)[0].remove();

			// TODO: de-init no-longer-needed scales?
		}

		self.delSeries = delSeries;

		series.forEach(initSeries);

		var xScaleKey = series[0].scale;
		var xScaleDistr = scales[xScaleKey].distr;

		// dependent scales inherit
		for (var k$1 in scales) {
			var sc$1 = scales[k$1];

			if (sc$1.from != null)
				{ scales[k$1] = assign({}, scales[sc$1.from], sc$1); }
		}

		function initAxis(axis, i) {
			if (axis.show) {
				var isVt = axis.side % 2;

				var sc = scales[axis.scale];

				// this can occur if all series specify non-default scales
				if (sc == null) {
					axis.scale = isVt ? series[1].scale : xScaleKey;
					sc = scales[axis.scale];
				}

				// also set defaults for incrs & values based on axis distr
				var isTime =  sc.time;

				axis.space = fnOrSelf(axis.space);
				axis.rotate = fnOrSelf(axis.rotate);
				axis.incrs  = fnOrSelf(axis.incrs  || (          sc.distr == 2 ? intIncrs : (isTime ? timeIncrs : numIncrs)));
				axis.splits = fnOrSelf(axis.splits || (isTime && sc.distr == 1 ? _timeAxisSplits : sc.distr == 3 ? logAxisSplits : numAxisSplits));
				var av = axis.values;
				axis.values = isTime ? (isArr(av) ? timeAxisVals(_tzDate, timeAxisStamps(av, _fmtDate)) : av || _timeAxisVals) : av || (sc.distr == 3 ? logAxisVals : numAxisVals);

				axis.font      = pxRatioFont(axis.font);
				axis.labelFont = pxRatioFont(axis.labelFont);
			}
		}

		// set axis defaults
		axes.forEach(initAxis);

		var dataLen;

		// rendered data window
		var i0 = null;
		var i1 = null;
		var idxs = series[0].idxs;

		var data0 = null;

		var forceUpdateLegend = false;

		function setData(_data, _resetScales) {
			_data = _data || [];
			_data[0] = _data[0] || [];

			self.data = _data;
			data = _data.slice();
			data0 = data[0];
			dataLen = data0.length;

			if (xScaleDistr == 2)
				{ data[0] = data0.map(function (v, i) { return i; }); }

			resetYSeries();

			fire("setData");

			forceUpdateLegend = true;

			if (_resetScales !== false) {
				var xsc = scales[xScaleKey];

				if (xsc.auto)
					{ autoScaleX(); }
				else
					{ _setScale(xScaleKey, xsc.min, xsc.max); }
			}
		}

		self.setData = setData;

		function autoScaleX() {
			i0 = idxs[0] = 0;
			i1 = idxs[1] = dataLen - 1;

			var _min = xScaleDistr == 2 ? i0 : data[0][i0],
				_max = xScaleDistr == 2 ? i1 : data[0][i1];

			_setScale(xScaleKey, _min, _max);
		}

		function setCtxStyle(stroke, width, dash, fill) {
			ctx.strokeStyle = stroke || hexBlack;
			ctx.lineWidth = width;
			ctx.lineJoin = "round";
			ctx.setLineDash(dash || []);
			ctx.fillStyle = fill || hexBlack;
		}

		var fullWidCss;
		var fullHgtCss;

		var plotWidCss;
		var plotHgtCss;

		// plot margins to account for axes
		var plotLftCss;
		var plotTopCss;

		var plotLft;
		var plotTop;
		var plotWid;
		var plotHgt;

		self.bbox = {};

		function _setSize(width, height) {
			self.width  = fullWidCss = plotWidCss = width;
			self.height = fullHgtCss = plotHgtCss = height;
			plotLftCss  = plotTopCss = 0;

			calcPlotRect();
			calcAxesRects();

			var bb = self.bbox;

			plotLft = bb[LEFT]   = incrRound(plotLftCss * pxRatio, 0.5);
			plotTop = bb[TOP]    = incrRound(plotTopCss * pxRatio, 0.5);
			plotWid = bb[WIDTH]  = incrRound(plotWidCss * pxRatio, 0.5);
			plotHgt = bb[HEIGHT] = incrRound(plotHgtCss * pxRatio, 0.5);

			setStylePx(under, LEFT,   plotLftCss);
			setStylePx(under, TOP,    plotTopCss);
			setStylePx(under, WIDTH,  plotWidCss);
			setStylePx(under, HEIGHT, plotHgtCss);

			setStylePx(over, LEFT,    plotLftCss);
			setStylePx(over, TOP,     plotTopCss);
			setStylePx(over, WIDTH,   plotWidCss);
			setStylePx(over, HEIGHT,  plotHgtCss);

			setStylePx(wrap, WIDTH,   fullWidCss);
			setStylePx(wrap, HEIGHT,  fullHgtCss);

			can[WIDTH]  = round(fullWidCss * pxRatio);
			can[HEIGHT] = round(fullHgtCss * pxRatio);

			syncRect();

			ready && _setScale(xScaleKey, scales[xScaleKey].min, scales[xScaleKey].max);

			ready && fire("setSize");
		}

		function setSize(ref) {
			var width = ref.width;
			var height = ref.height;

			_setSize(width, height);
		}

		self.setSize = setSize;

		// accumulate axis offsets, reduce canvas width
		function calcPlotRect() {
			// easements for edge labels
			var hasTopAxis = false;
			var hasBtmAxis = false;
			var hasRgtAxis = false;
			var hasLftAxis = false;

			axes.forEach(function (axis, i) {
				if (axis.show) {
					var side = axis.side;
					var size = axis.size;
					var isVt = side % 2;
					var labelSize = axis.labelSize = (axis.label != null ? (axis.labelSize || 30) : 0);

					var fullSize = size + labelSize;

					if (fullSize > 0) {
						if (isVt) {
							plotWidCss -= fullSize;

							if (side == 3) {
								plotLftCss += fullSize;
								hasLftAxis = true;
							}
							else
								{ hasRgtAxis = true; }
						}
						else {
							plotHgtCss -= fullSize;

							if (side == 0) {
								plotTopCss += fullSize;
								hasTopAxis = true;
							}
							else
								{ hasBtmAxis = true; }
						}
					}
				}
			});

			// hz gutters
			if (hasTopAxis || hasBtmAxis) {
				if (!hasRgtAxis)
					{ plotWidCss -= gutters.x; }
				if (!hasLftAxis) {
					plotWidCss -= gutters.x;
					plotLftCss += gutters.x;
				}
			}

			// vt gutters
			if (hasLftAxis || hasRgtAxis) {
				if (!hasBtmAxis)
					{ plotHgtCss -= gutters.y; }
				if (!hasTopAxis) {
					plotHgtCss -= gutters.y;
					plotTopCss += gutters.y;
				}
			}
		}

		function calcAxesRects() {
			// will accum +
			var off1 = plotLftCss + plotWidCss;
			var off2 = plotTopCss + plotHgtCss;
			// will accum -
			var off3 = plotLftCss;
			var off0 = plotTopCss;

			function incrOffset(side, size) {

				switch (side) {
					case 1: off1 += size; return off1 - size;
					case 2: off2 += size; return off2 - size;
					case 3: off3 -= size; return off3 + size;
					case 0: off0 -= size; return off0 + size;
				}
			}

			axes.forEach(function (axis, i) {
				var side = axis.side;

				axis._pos = incrOffset(side, axis.size);

				if (axis.label != null)
					{ axis._lpos = incrOffset(side, axis.labelSize); }
			});
		}

		function setScales() {
			if (inBatch) {
				shouldSetScales = true;
				return;
			}

		//	log("setScales()", arguments);

			if (dataLen > 0) {
				// wip scales
				var wipScales = copy(scales);

				for (var k in wipScales) {
					var wsc = wipScales[k];
					var psc = pendScales[k];

					if (psc != null) {
						assign(wsc, psc);

						// explicitly setting the x-scale invalidates everything (acts as redraw)
						if (k == xScaleKey)
							{ resetYSeries(); }
					}
					else if (k != xScaleKey) {
						wsc.min = inf;
						wsc.max = -inf;
					}
				}

				// pre-range y-scales from y series' data values
				series.forEach(function (s, i) {
					var k = s.scale;
					var wsc = wipScales[k];

					// setting the x scale invalidates everything
					if (i == 0) {
						var minMax = wsc.range(self, wsc.min, wsc.max, k);

						wsc.min = minMax[0];
						wsc.max = minMax[1];

						i0 = closestIdx(wsc.min, data[0]);
						i1 = closestIdx(wsc.max, data[0]);

						// closest indices can be outside of view
						if ((data[0][i0] < wsc.min) && (i1 - i0 > 1))
							{ i0++; }
						if ((data[0][i1] > wsc.max) && (i1 - i0 > 1))
							{ i1--; }

						s.min = data0[i0];
						s.max = data0[i1];
					}
					else if (s.show && pendScales[k] == null) {
						// only run getMinMax() for invalidated series data, else reuse
						var minMax$1 = s.min == inf ? (wsc.auto ? getMinMax(data[i], i0, i1, s.sorted) : [0,100]) : [s.min, s.max];

						// initial min/max
						wsc.min = min(wsc.min, s.min = minMax$1[0]);
						wsc.max = max(wsc.max, s.max = minMax$1[1]);
					}

					s.idxs[0] = i0;
					s.idxs[1] = i1;
				});

				// range independent scales
				for (var k$1 in wipScales) {
					var wsc$1 = wipScales[k$1];

					if (wsc$1.from == null && wsc$1.min != inf && pendScales[k$1] == null) {
						var minMax = wsc$1.range(self, wsc$1.min, wsc$1.max, k$1);
						wsc$1.min = minMax[0];
						wsc$1.max = minMax[1];
					}
				}

				// range dependent scales
				for (var k$2 in wipScales) {
					var wsc$2 = wipScales[k$2];

					if (wsc$2.from != null) {
						var base = wipScales[wsc$2.from];

						if (base.min != inf) {
							var minMax$1 = wsc$2.range(self, base.min, base.max, k$2);
							wsc$2.min = minMax$1[0];
							wsc$2.max = minMax$1[1];
						}
					}
				}

				var changed = {};

				for (var k$3 in wipScales) {
					var wsc$3 = wipScales[k$3];
					var sc = scales[k$3];

					if (sc.min != wsc$3.min || sc.max != wsc$3.max) {
						sc.min = wsc$3.min;
						sc.max = wsc$3.max;
						changed[k$3] = true;
					}
				}

				// invalidate paths of all series on changed scales
				series.forEach(function (s) {
					if (changed[s.scale])
						{ s._paths = null; }
				});

				for (var k$4 in changed)
					{ fire("setScale", k$4); }
			}

			for (var k$5 in pendScales)
				{ pendScales[k$5] = null; }

			 cursor.show && updateCursor();
		}

		// TODO: drawWrap(si, drawPoints) (save, restore, translate, clip)

		function drawPoints(si) {
		//	log("drawPoints()", arguments);

			var s = series[si];
			var p = s.points;

			var width = round3(p.width * pxRatio);
			var offset = (width % 2) / 2;
			var isStroked = p.width > 0;

			var rad = (p.size - p.width) / 2 * pxRatio;
			var dia = round3(rad * 2);

			ctx.translate(offset, offset);

			ctx.save();

			ctx.beginPath();
			ctx.rect(
				plotLft - dia,
				plotTop - dia,
				plotWid + dia * 2,
				plotHgt + dia * 2
			);
			ctx.clip();

			ctx.globalAlpha = s.alpha;

			var path = new Path2D();

			for (var pi = i0; pi <= i1; pi++) {
				if (data[si][pi] != null) {
					var x = round(getXPos(data[0][pi],  scales[xScaleKey], plotWid, plotLft));
					var y = round(getYPos(data[si][pi], scales[s.scale],   plotHgt, plotTop));

					path.moveTo(x + rad, y);
					path.arc(x, y, rad, 0, PI * 2);
				}
			}

			setCtxStyle(
				p.stroke || s.stroke || hexBlack,
				width,
				null,
				p.fill || (isStroked ? "#fff" : s.stroke || hexBlack)
			);

			ctx.fill(path);
			isStroked && ctx.stroke(path);

			ctx.globalAlpha = 1;

			ctx.restore();

			ctx.translate(-offset, -offset);
		}

		// grabs the nearest indices with y data outside of x-scale limits
		function getOuterIdxs(ydata) {
			var _i0 = clamp(i0 - 1, 0, dataLen - 1);
			var _i1 = clamp(i1 + 1, 0, dataLen - 1);

			while (ydata[_i0] == null && _i0 > 0)
				{ _i0--; }

			while (ydata[_i1] == null && _i1 < dataLen - 1)
				{ _i1++; }

			return [_i0, _i1];
		}

		var dir = 1;

		function drawSeries() {
			// path building loop must be before draw loop to ensure that all bands are fully constructed
			series.forEach(function (s, i) {
				if (i > 0 && s.show && dataLen > 0 && s._paths == null) {
					var _idxs = getOuterIdxs(data[i]);
					s._paths = s.paths(self, i, _idxs[0], _idxs[1]);
				}
			});

			series.forEach(function (s, i) {
				if (i > 0 && s.show) {
					if (s._paths)
						 { drawPath(i); }

					if (s.points.show(self, i, i0, i1))
						 { drawPoints(i); }

					fire("drawSeries", i);
				}
			});
		}

		function drawPath(si) {
			var s = series[si];

			if (dir == 1) {
				var ref = s._paths;
				var stroke = ref.stroke;
				var fill = ref.fill;
				var clip = ref.clip;
				var width = round3(s[WIDTH] * pxRatio);
				var offset = (width % 2) / 2;

				setCtxStyle(s.stroke, width, s.dash, s.fill);

				ctx.globalAlpha = s.alpha;

				ctx.translate(offset, offset);

				ctx.save();

				var lft = plotLft,
					top = plotTop,
					wid = plotWid,
					hgt = plotHgt;

				var halfWid = width * pxRatio / 2;

				if (s.min == 0)
					{ hgt += halfWid; }

				if (s.max == 0) {
					top -= halfWid;
					hgt += halfWid;
				}

				ctx.beginPath();
				ctx.rect(lft, top, wid, hgt);
				ctx.clip();

				if (clip != null)
					{ ctx.clip(clip); }

				if (s.band) {
					ctx.fill(stroke);
					width && ctx.stroke(stroke);
				}
				else {
					width && ctx.stroke(stroke);

					if (s.fill != null)
						{ ctx.fill(fill); }
				}

				ctx.restore();

				ctx.translate(-offset, -offset);

				ctx.globalAlpha = 1;
			}

			if (s.band)
				{ dir *= -1; }
		}

		function buildClip(is, gaps, nullHead, nullTail) {
			var s = series[is];

			var clip = null;

			// create clip path (invert gaps and non-gaps)
			if (gaps.length > 0) {
				if (s.spanGaps) {
					var headGap = gaps[0];
					var tailGap = gaps[gaps.length - 1];
					gaps = [];

					if (nullHead)
						{ gaps.push(headGap); }
					if (nullTail)
						{ gaps.push(tailGap); }
				}

				clip = new Path2D();

				var prevGapEnd = plotLft;

				for (var i = 0; i < gaps.length; i++) {
					var g = gaps[i];

					clip.rect(prevGapEnd, plotTop, g[0] - prevGapEnd, plotTop + plotHgt);

					prevGapEnd = g[1];
				}

				clip.rect(prevGapEnd, plotTop, plotLft + plotWid - prevGapEnd, plotTop + plotHgt);
			}

			return clip;
		}

		function addGap(gaps, outX, x) {
			var prevGap = gaps[gaps.length - 1];

			if (prevGap && prevGap[0] == outX)			// TODO: gaps must be encoded at stroke widths?
				{ prevGap[1] = x; }
			else
				{ gaps.push([outX, x]); }
		}

		function buildPaths(self, is, _i0, _i1) {
			var s = series[is];

			var xdata  = data[0];
			var ydata  = data[is];
			var scaleX = scales[xScaleKey];
			var scaleY = scales[s.scale];

			var _paths = dir == 1 ? {stroke: new Path2D(), fill: null, clip: null} : series[is-1]._paths;
			var stroke = _paths.stroke;
			var width = round3(s[WIDTH] * pxRatio);

			var minY = inf,
				maxY = -inf,
				outY, outX;

			// todo: don't build gaps on dir = -1 pass
			var gaps = [];

			var accX = round(getXPos(xdata[dir == 1 ? _i0 : _i1], scaleX, plotWid, plotLft));

			// the moves the shape edge outside the canvas so stroke doesnt bleed in
			if (s.band && dir == 1 && _i0 == i0) {
				if (width)
					{ stroke.lineTo(-width, round(getYPos(ydata[_i0], scaleY, plotHgt, plotTop))); }

				if (scaleX.min < xdata[0])
					{ gaps.push([plotLft, accX - 1]); }
			}

			for (var i = dir == 1 ? _i0 : _i1; i >= _i0 && i <= _i1; i += dir) {
				var x = round(getXPos(xdata[i], scaleX, plotWid, plotLft));

				if (x == accX) {
					if (ydata[i] != null) {
						outY = round(getYPos(ydata[i], scaleY, plotHgt, plotTop));
						minY = min(outY, minY);
						maxY = max(outY, maxY);
					}
				}
				else {
					var _addGap = false;

					if (minY != inf) {
						stroke.lineTo(accX, minY);
						stroke.lineTo(accX, maxY);
						stroke.lineTo(accX, outY);
						outX = accX;
					}
					else
						{ _addGap = true; }

					if (ydata[i] != null) {
						outY = round(getYPos(ydata[i], scaleY, plotHgt, plotTop));
						stroke.lineTo(x, outY);
						minY = maxY = outY;

						// prior pixel can have data but still start a gap if ends with null
						if (x - accX > 1 && ydata[i-1] == null)
							{ _addGap = true; }
					}
					else {
						minY = inf;
						maxY = -inf;
					}

					_addGap && addGap(gaps, outX, x);

					accX = x;
				}
			}

			// extend or insert rightmost gap if no data exists to the right
			if (ydata[_i1] == null)
				{ addGap(gaps, outX, accX); }

			if (s.band) {
				var overShoot = width * 100, _iy, _x;

				// the moves the shape edge outside the canvas so stroke doesnt bleed in
				if (dir == -1 && _i0 == i0) {
					_x = plotLft - overShoot;
					_iy = _i0;
				}

				if (dir == 1 && _i1 == i1) {
					_x = plotLft + plotWid + overShoot;
					_iy = _i1;

					if (scaleX.max > xdata[dataLen - 1])
						{ gaps.push([accX, plotLft + plotWid]); }
				}

				stroke.lineTo(_x, round(getYPos(ydata[_iy], scaleY, plotHgt, plotTop)));
			}

			if (dir == 1) {
				_paths.clip = buildClip(is, gaps, ydata[_i0] == null, ydata[_i1] == null);

				if (s.fill != null) {
					var fill = _paths.fill = new Path2D(stroke);

					var zeroY = round(getYPos(0, scaleY, plotHgt, plotTop));
					fill.lineTo(plotLft + plotWid, zeroY);
					fill.lineTo(plotLft, zeroY);
				}
			}

			if (s.band)
				{ dir *= -1; }

			return _paths;
		}

		function getIncrSpace(axisIdx, min, max, fullDim) {
			var axis = axes[axisIdx];

			var incrSpace;

			if (fullDim <= 0)
				{ incrSpace = [0, 0]; }
			else {
				var minSpace = axis.space(self, axisIdx, min, max, fullDim);
				var incrs = axis.incrs(self, axisIdx, min, max, fullDim, minSpace);
				incrSpace = findIncr(max - min, incrs, fullDim, minSpace);
			}

			return incrSpace;
		}

		function drawOrthoLines(offs, ori, side, pos0, len, width, stroke, dash) {
			var offset = (width % 2) / 2;

			ctx.translate(offset, offset);

			setCtxStyle(stroke, width, dash);

			ctx.beginPath();

			var x0, y0, x1, y1, pos1 = pos0 + (side == 0 || side == 3 ? -len : len);

			if (ori == 0) {
				y0 = pos0;
				y1 = pos1;
			}
			else {
				x0 = pos0;
				x1 = pos1;
			}

			offs.forEach(function (off, i) {
				if (ori == 0)
					{ x0 = x1 = off; }
				else
					{ y0 = y1 = off; }

				ctx.moveTo(x0, y0);
				ctx.lineTo(x1, y1);
			});

			ctx.stroke();

			ctx.translate(-offset, -offset);
		}

		function drawAxesGrid() {
			axes.forEach(function (axis, i) {
				if (!axis.show)
					{ return; }

				var scale = scales[axis.scale];

				// this will happen if all series using a specific scale are toggled off
				if (scale.min == inf)
					{ return; }

				var side = axis.side;
				var ori = side % 2;

				var min = scale.min;
				var max = scale.max;

				var ref = getIncrSpace(i, min, max, ori == 0 ? plotWidCss : plotHgtCss);
				var incr = ref[0];
				var space = ref[1];

				// if we're using index positions, force first tick to match passed index
				var forceMin = scale.distr == 2;

				var splits = axis.splits(self, i, min, max, incr, space, forceMin);

				var getPos  = ori == 0 ? getXPos : getYPos;
				var plotDim = ori == 0 ? plotWid : plotHgt;
				var plotOff = ori == 0 ? plotLft : plotTop;

				var canOffs = splits.map(function (val) { return round(getPos(val, scale, plotDim, plotOff)); });

				var axisGap  = round(axis.gap * pxRatio);

				var ticks = axis.ticks;
				var tickSize = ticks.show ? round(ticks.size * pxRatio) : 0;

				// tick labels
				// BOO this assumes a specific data/series
				var values = axis.values(
					self,
					scale.distr == 2 ? splits.map(function (i) { return data0[i]; }) : splits,
					i,
					space,
					scale.distr == 2 ? data0[splits[1]] -  data0[splits[0]] : incr
				);

				// rotating of labels only supported on bottom x axis
				var angle = side == 2 ? axis.rotate(self, values, i, space) * -PI/180 : 0;

				var basePos  = round(axis._pos * pxRatio);
				var shiftAmt = tickSize + axisGap;
				var shiftDir = ori == 0 && side == 0 || ori == 1 && side == 3 ? -1 : 1;
				var finalPos = basePos + shiftAmt * shiftDir;
				var y        = ori == 0 ? finalPos : 0;
				var x        = ori == 1 ? finalPos : 0;

				ctx.font         = axis.font[0];
				ctx.fillStyle    = axis.stroke || hexBlack;									// rgba?
				ctx.textAlign    = angle > 0 ? LEFT :
				                   angle < 0 ? RIGHT :
				                   ori == 0 ? "center" : side == 3 ? RIGHT : LEFT;
				ctx.textBaseline = angle ||
				                   ori == 1 ? "middle" : side == 2 ? TOP   : BOTTOM;

				var lineHeight   = axis.font[1] * lineMult;

				values.forEach(function (val, i) {
					if (ori == 0)
						{ x = canOffs[i]; }
					else
						{ y = canOffs[i]; }

					(""+val).split(/\n/gm).forEach(function (text, j) {
						if (angle) {
							ctx.save();
							ctx.translate(x, y + j * lineHeight);
							ctx.rotate(angle);
							ctx.fillText(text, 0, 0);
							ctx.restore();
						}
						else
							{ ctx.fillText(text, x, y + j * lineHeight); }
					});
				});

				// axis label
				if (axis.label) {
					ctx.save();

					var baseLpos = round(axis._lpos * pxRatio);

					if (ori == 1) {
						x = y = 0;

						ctx.translate(
							baseLpos,
							round(plotTop + plotHgt / 2)
						);
						ctx.rotate((side == 3 ? -PI : PI) / 2);

					}
					else {
						x = round(plotLft + plotWid / 2);
						y = baseLpos;
					}

					ctx.font         = axis.labelFont[0];
				//	ctx.fillStyle    = axis.labelStroke || hexBlack;						// rgba?
					ctx.textAlign    = "center";
					ctx.textBaseline = side == 2 ? TOP : BOTTOM;

					ctx.fillText(axis.label, x, y);

					ctx.restore();
				}

				// ticks
				if (ticks.show) {
					drawOrthoLines(
						canOffs,
						ori,
						side,
						basePos,
						tickSize,
						round3(ticks[WIDTH] * pxRatio),
						ticks.stroke
					);
				}

				// grid
				var grid = axis.grid;

				if (grid.show) {
					drawOrthoLines(
						canOffs,
						ori,
						ori == 0 ? 2 : 1,
						ori == 0 ? plotTop : plotLft,
						ori == 0 ? plotHgt : plotWid,
						round3(grid[WIDTH] * pxRatio),
						grid.stroke,
						grid.dash
					);
				}
			});

			fire("drawAxes");
		}

		function resetYSeries() {
		//	log("resetYSeries()", arguments);

			series.forEach(function (s, i) {
				if (i > 0) {
					s.min = inf;
					s.max = -inf;
					s._paths = null;
				}
			});
		}

		var didPaint;

		function paint() {
			if (inBatch) {
				shouldPaint = true;
				return;
			}

		//	log("paint()", arguments);

			ctx.clearRect(0, 0, can[WIDTH], can[HEIGHT]);
			fire("drawClear");
			drawAxesGrid();
			drawSeries();
			didPaint = true;
			fire("draw");
		}

		self.redraw = function (rebuildPaths) {
			if (rebuildPaths !== false)
				{ _setScale(xScaleKey, scales[xScaleKey].min, scales[xScaleKey].max); }
			else
				{ paint(); }
		};

		// redraw() => setScale('x', scales.x.min, scales.x.max);

		// explicit, never re-ranged (is this actually true? for x and y)
		function setScale(key, opts) {
			var sc = scales[key];

			if (sc.from == null) {
				if (key == xScaleKey) {
					if (sc.distr == 2) {
						opts.min = closestIdx(opts.min, data[0]);
						opts.max = closestIdx(opts.max, data[0]);
					}

					// prevent setting a temporal x scale too small since Date objects cannot advance ticks smaller than 1ms
					if ( sc.time && axes[0].show && opts.max > opts.min) {
						// since scales and axes are loosly coupled, we have to make some assumptions here :(
						var incr = getIncrSpace(0, opts.min, opts.max, plotWidCss)[0];

						if (incr < 1e-3)
							{ return; }
					}
				}

			//	log("setScale()", arguments);

				pendScales[key] = opts;

				didPaint = false;
				setScales();
				!didPaint && paint();
				didPaint = false;
			}
		}

		self.setScale = setScale;

	//	INTERACTION

		var vt;
		var hz;

		// starting position
		var mouseLeft0;
		var mouseTop0;

		// current position
		var mouseLeft1;
		var mouseTop1;

		var dragging = false;

		var drag =  cursor.drag;

		var dragX =  drag.x;
		var dragY =  drag.y;

		if ( cursor.show) {
			if (cursor.x) {
				mouseLeft1 = cursor.left;
				vt = placeDiv(CURSOR_X, over);
			}

			if (cursor.y) {
				mouseTop1 = cursor.top;
				hz = placeDiv(CURSOR_Y, over);
			}
		}

		var select = self.select = assign({
			show:   true,
			left:	0,
			width:	0,
			top:	0,
			height:	0,
		}, opts.select);

		var selectDiv = select.show ? placeDiv(SELECT, over) : null;

		function setSelect(opts, _fire) {
			if (select.show) {
				for (var prop in opts)
					{ setStylePx(selectDiv, prop, select[prop] = opts[prop]); }

				_fire !== false && fire("setSelect");
			}
		}

		self.setSelect = setSelect;

		function toggleDOM(i, onOff) {
			var s = series[i];
			var label = showLegend ? legendRows[i][0].parentNode : null;

			if (s.show)
				{ label && remClass(label, OFF); }
			else {
				label && addClass(label, OFF);
				 cursorPts.length > 1 && trans(cursorPts[i], 0, -10);
			}
		}

		function _setScale(key, min, max) {
			setScale(key, {min: min, max: max});
		}

		function setSeries(i, opts, pub) {
		//	log("setSeries()", arguments);

			var s = series[i];

		//	batch(() => {
				// will this cause redundant paint() if both show and focus are set?
				if (opts.focus != null)
					{ setFocus(i); }

				if (opts.show != null) {
					s.show = opts.show;
					 toggleDOM(i, opts.show);

					if (s.band) {
						// not super robust, will break if two bands are adjacent
						var ip = series[i+1] && series[i+1].band ? i+1 : i-1;
						series[ip].show = s.show;
						 toggleDOM(ip, opts.show);
					}

					_setScale(xScaleKey, scales[xScaleKey].min, scales[xScaleKey].max);		// redraw
				}
		//	});

			// firing setSeries after setScale seems out of order, but provides access to the updated props
			// could improve by predefining firing order and building a queue
			fire("setSeries", i, opts);

			 pub && sync.pub("setSeries", self, i, opts);
		}

		self.setSeries = setSeries;

		function _alpha(i, value) {
			series[i].alpha = value;

			if ( cursor.show && cursorPts[i])
				{ cursorPts[i].style.opacity = value; }

			if ( showLegend && legendRows[i])
				{ legendRows[i][0].parentNode.style.opacity = value; }
		}

		function _setAlpha(i, value) {
			var s = series[i];

			_alpha(i, value);

			if (s.band) {
				// not super robust, will break if two bands are adjacent
				var ip = series[i+1].band ? i+1 : i-1;
				_alpha(ip, value);
			}
		}

		// y-distance
		var distsToCursor =  Array(series.length);

		var focused = null;

		function setFocus(i) {
			if (i != focused) {
			//	log("setFocus()", arguments);

				series.forEach(function (s, i2) {
					_setAlpha(i2, i == null || i2 == 0 || i2 == i ? 1 : focus.alpha);
				});

				focused = i;
				paint();
			}
		}

		if (showLegend && cursorFocus) {
			on(mouseleave, legendEl, function (e) {
				if (cursor.locked)
					{ return; }
				setSeries(null, {focus: false}, syncOpts.setSeries);
				updateCursor();
			});
		}

		function scaleValueAtPos(pos, scale) {
			var dim = plotWidCss;

			if (scale != xScaleKey) {
				dim = plotHgtCss;
				pos = dim - pos;
			}

			var pct = pos / dim;

			var sc = scales[scale],
				_min = sc.min,
				_max = sc.max;

			if (sc.distr == 3) {
				_min = log10(_min);
				_max = log10(_max);
				return pow(10, _min + (_max - _min) * pct);
			}
			else
				{ return _min + (_max - _min) * pct; }
		}

		function closestIdxFromXpos(pos) {
			var v = scaleValueAtPos(pos, xScaleKey);
			return closestIdx(v, data[0], i0, i1);
		}

		self.valToIdx = function (val) { return closestIdx(val, data[0]); };
		self.posToIdx = closestIdxFromXpos;
		self.posToVal = scaleValueAtPos;
		self.valToPos = function (val, scale, can) { return (
			scale == xScaleKey ?
			getXPos(val, scales[scale],
				can ? plotWid : plotWidCss,
				can ? plotLft : 0
			) :
			getYPos(val, scales[scale],
				can ? plotHgt : plotHgtCss,
				can ? plotTop : 0
			)
		); };

		var inBatch = false;
		var shouldPaint = false;
		var shouldSetScales = false;
		var shouldUpdateCursor = false;

		// defers calling expensive functions
		function batch(fn) {
			inBatch = true;
			fn(self);
			inBatch = false;
			shouldSetScales && setScales();
			 shouldUpdateCursor && updateCursor();
			shouldPaint && !didPaint && paint();
			shouldSetScales = shouldUpdateCursor = shouldPaint = didPaint = inBatch;
		}

		self.batch = batch;

		 (self.setCursor = function (opts) {
			mouseLeft1 = opts.left;
			mouseTop1 = opts.top;
		//	assign(cursor, opts);
			updateCursor();
		});

		var cursorRaf = 0;

		function updateCursor(ts, src) {
			if (inBatch) {
				shouldUpdateCursor = true;
				return;
			}

		//	ts == null && log("updateCursor()", arguments);

			cursorRaf = 0;

			if (cursor.show) {
				cursor.x && trans(vt,round(mouseLeft1),0);
				cursor.y && trans(hz,0,round(mouseTop1));
			}

			var idx;

			// when zooming to an x scale range between datapoints the binary search
			// for nearest min/max indices results in this condition. cheap hack :D
			var noDataInRange = i0 > i1;

			// if cursor hidden, hide points & clear legend vals
			if (mouseLeft1 < 0 || dataLen == 0 || noDataInRange) {
				idx = null;

				for (var i = 0; i < series.length; i++) {
					if (i > 0) {
						distsToCursor[i] = inf;
						 cursorPts.length > 1 && trans(cursorPts[i], -10, -10);
					}

					if (showLegend && legend.live) {
						if (i == 0 && multiValLegend)
							{ continue; }

						for (var j = 0; j < legendRows[i].length; j++)
							{ legendRows[i][j][firstChild].nodeValue = '--'; }
					}
				}

				if (cursorFocus)
					{ setSeries(null, {focus: true}, syncOpts.setSeries); }
			}
			else {
			//	let pctY = 1 - (y / rect[HEIGHT]);

				idx = closestIdxFromXpos(mouseLeft1);

				var scX = scales[xScaleKey];

				var xPos = round3(getXPos(data[0][idx], scX, plotWidCss, 0));

				for (var i$1 = 0; i$1 < series.length; i$1++) {
					var s = series[i$1];

					var idx2 = cursor.dataIdx(self, i$1, idx);
					var xPos2 = idx2 == idx ? xPos : round3(getXPos(data[0][idx2], scX, plotWidCss, 0));

					if (i$1 > 0 && s.show) {
						var valAtIdx = data[i$1][idx2];

						var yPos = valAtIdx == null ? -10 : round3(getYPos(valAtIdx, scales[s.scale], plotHgtCss, 0));

						distsToCursor[i$1] = yPos > 0 ? abs(yPos - mouseTop1) : inf;

						 cursorPts.length > 1 && trans(cursorPts[i$1], xPos2, yPos);
					}
					else
						{ distsToCursor[i$1] = inf; }

					if (showLegend && legend.live) {
						if ((idx2 == cursor.idx && !forceUpdateLegend) || i$1 == 0 && multiValLegend)
							{ continue; }

						var src$1 = i$1 == 0 && xScaleDistr == 2 ? data0 : data[i$1];

						var vals = multiValLegend ? s.values(self, i$1, idx2) : {_: s.value(self, src$1[idx2], i$1, idx2)};

						var j$1 = 0;

						for (var k in vals)
							{ legendRows[i$1][j$1++][firstChild].nodeValue = vals[k]; }
					}
				}

				forceUpdateLegend = false;
			}

			// nit: cursor.drag.setSelect is assumed always true
			if (select.show && dragging) {
				var dx = abs(mouseLeft1 - mouseLeft0);
				var dy = abs(mouseTop1 - mouseTop0);

				if (src != null) {
					var ref = syncOpts.scales;
					var xKey = ref[0];
					var yKey = ref[1];

					// match the dragX/dragY implicitness/explicitness of src
					var sdrag = src.cursor.drag;
					dragX = sdrag._x;
					dragY = sdrag._y;

					if (xKey) {
						var sc = scales[xKey];
						var srcLeft = src.posToVal(src.select[LEFT], xKey);
						var srcRight = src.posToVal(src.select[LEFT] + src.select[WIDTH], xKey);

						select[LEFT] = getXPos(srcLeft, sc, plotWidCss, 0);
						select[WIDTH] = abs(select[LEFT] - getXPos(srcRight, sc, plotWidCss, 0));

						setStylePx(selectDiv, LEFT, select[LEFT]);
						setStylePx(selectDiv, WIDTH, select[WIDTH]);

						if (!yKey) {
							setStylePx(selectDiv, TOP, select[TOP] = 0);
							setStylePx(selectDiv, HEIGHT, select[HEIGHT] = plotHgtCss);
						}
					}

					if (yKey) {
						var sc$1 = scales[yKey];
						var srcTop = src.posToVal(src.select[TOP], yKey);
						var srcBottom = src.posToVal(src.select[TOP] + src.select[HEIGHT], yKey);

						select[TOP] = getYPos(srcTop, sc$1, plotHgtCss, 0);
						select[HEIGHT] = abs(select[TOP] - getYPos(srcBottom, sc$1, plotHgtCss, 0));

						setStylePx(selectDiv, TOP, select[TOP]);
						setStylePx(selectDiv, HEIGHT, select[HEIGHT]);

						if (!xKey) {
							setStylePx(selectDiv, LEFT, select[LEFT] = 0);
							setStylePx(selectDiv, WIDTH, select[WIDTH] = plotWidCss);
						}
					}
				}
				else {
					dragX = drag.x && dx >= drag.dist;
					dragY = drag.y && dy >= drag.dist;

					var uni = drag.uni;

					if (uni != null) {
						// only calc drag status if they pass the dist thresh
						if (dragX && dragY) {
							dragX = dx >= uni;
							dragY = dy >= uni;

							// force unidirectionality when both are under uni limit
							if (!dragX && !dragY) {
								if (dy > dx)
									{ dragY = true; }
								else
									{ dragX = true; }
							}
						}
					}
					else if (drag.x && drag.y && (dragX || dragY))
						// if omni with no uni then both dragX / dragY should be true if either is true
						{ dragX = dragY = true; }

					if (dragX) {
						var minX = min(mouseLeft0, mouseLeft1);

						setStylePx(selectDiv, LEFT,  select[LEFT] = minX);
						setStylePx(selectDiv, WIDTH, select[WIDTH] = dx);

						if (!dragY) {
							setStylePx(selectDiv, TOP, select[TOP] = 0);
							setStylePx(selectDiv, HEIGHT, select[HEIGHT] = plotHgtCss);
						}
					}

					if (dragY) {
						var minY = min(mouseTop0, mouseTop1);

						setStylePx(selectDiv, TOP,    select[TOP] = minY);
						setStylePx(selectDiv, HEIGHT, select[HEIGHT] = dy);

						if (!dragX) {
							setStylePx(selectDiv, LEFT, select[LEFT] = 0);
							setStylePx(selectDiv, WIDTH, select[WIDTH] = plotWidCss);
						}
					}

					if (!dragX && !dragY) {
						// the drag didn't pass the dist requirement
						setStylePx(selectDiv, HEIGHT, select[HEIGHT] = 0);
						setStylePx(selectDiv, WIDTH,  select[WIDTH]  = 0);
					}
				}
			}

			cursor.idx = idx;
			cursor.left = mouseLeft1;
			cursor.top = mouseTop1;
			drag._x = dragX;
			drag._y = dragY;

			// if ts is present, means we're implicitly syncing own cursor as a result of debounced rAF
			if (ts != null) {
				// this is not technically a "mousemove" event, since it's debounced, rename to setCursor?
				// since this is internal, we can tweak it later
				sync.pub(mousemove, self, mouseLeft1, mouseTop1, plotWidCss, plotHgtCss, idx);

				if (cursorFocus) {
					var minDist = min.apply(null, distsToCursor);

					var fi = null;

					if (minDist <= focus.prox) {
						distsToCursor.some(function (dist, i) {
							if (dist == minDist)
								{ return fi = i; }
						});
					}

					setSeries(fi, {focus: true}, syncOpts.setSeries);
				}
			}

			ready && fire("setCursor");
		}

		var rect = null;

		function syncRect() {
			rect = over.getBoundingClientRect();
		}

		function mouseMove(e, src, _x, _y, _w, _h, _i) {
			if (cursor.locked)
				{ return; }

			cacheMouse(e, src, _x, _y, _w, _h, _i, false, e != null);

			if (e != null) {
				if (cursorRaf == 0)
					{ cursorRaf = rAF(updateCursor); }
			}
			else
				{ updateCursor(null, src); }
		}

		function cacheMouse(e, src, _x, _y, _w, _h, _i, initial, snap) {
			if (e != null) {
				_x = e.clientX - rect.left;
				_y = e.clientY - rect.top;
			}
			else {
				if (_x < 0 || _y < 0) {
					mouseLeft1 = -10;
					mouseTop1 = -10;
					return;
				}

				var ref = syncOpts.scales;
				var xKey = ref[0];
				var yKey = ref[1];

				if (xKey != null)
					{ _x = getXPos(src.posToVal(_x, xKey), scales[xKey], plotWidCss, 0); }
				else
					{ _x = plotWidCss * (_x/_w); }

				if (yKey != null)
					{ _y = getYPos(src.posToVal(_y, yKey), scales[yKey], plotHgtCss, 0); }
				else
					{ _y = plotHgtCss * (_y/_h); }
			}

			if (snap) {
				if (_x <= 1 || _x >= plotWidCss - 1)
					{ _x = incrRound(_x, plotWidCss); }

				if (_y <= 1 || _y >= plotHgtCss - 1)
					{ _y = incrRound(_y, plotHgtCss); }
			}

			if (initial) {
				mouseLeft0 = _x;
				mouseTop0 = _y;
			}
			else {
				mouseLeft1 = _x;
				mouseTop1 = _y;
			}
		}

		function hideSelect() {
			setSelect({
				width: 0,
				height: 0,
			}, false);
		}

		function mouseDown(e, src, _x, _y, _w, _h, _i) {
			if (src != null || filtMouse(e)) {
				dragging = true;
				dragX = dragY = drag._x = drag._y = false;

				cacheMouse(e, src, _x, _y, _w, _h, _i, true, false);

				if (e != null) {
					on(mouseup, doc, mouseUp);
					sync.pub(mousedown, self, mouseLeft0, mouseTop0, plotWidCss, plotHgtCss, null);
				}
			}
		}

		function mouseUp(e, src, _x, _y, _w, _h, _i) {
			if (src != null || filtMouse(e)) {
				dragging = drag._x = drag._y = false;

				cacheMouse(e, src, _x, _y, _w, _h, _i, false, true);

				var hasSelect = select[WIDTH] > 0 || select[HEIGHT] > 0;

				hasSelect && setSelect(select);

				if (drag.setScale && hasSelect) {
				//	if (syncKey != null) {
				//		dragX = drag.x;
				//		dragY = drag.y;
				//	}

					batch(function () {
						if (dragX) {
							_setScale(xScaleKey,
								scaleValueAtPos(select[LEFT], xScaleKey),
								scaleValueAtPos(select[LEFT] + select[WIDTH], xScaleKey)
							);
						}

						if (dragY) {
							for (var k in scales) {
								var sc = scales[k];

								if (k != xScaleKey && sc.from == null) {
									_setScale(k,
										scaleValueAtPos(select[TOP] + select[HEIGHT], k),
										scaleValueAtPos(select[TOP], k)
									);
								}
							}
						}
					});

					hideSelect();
				}
				else if (cursor.lock) {
					cursor.locked = !cursor.locked;

					if (!cursor.locked)
						{ updateCursor(); }
				}
			}

			if (e != null) {
				off(mouseup, doc, mouseUp);
				sync.pub(mouseup, self, mouseLeft1, mouseTop1, plotWidCss, plotHgtCss, null);
			}
		}

		function mouseLeave(e, src, _x, _y, _w, _h, _i) {
			if (!cursor.locked) {
				var _dragging = dragging;

				if (dragging) {
					// handle case when mousemove aren't fired all the way to edges by browser
					var snapX = true;
					var snapY = true;
					var snapProx = 10;

					if (dragX && dragY) {
						// maybe omni corner snap
						snapX = mouseLeft1 <= snapProx || mouseLeft1 >= plotWidCss - snapProx;
						snapY = mouseTop1  <= snapProx || mouseTop1  >= plotHgtCss - snapProx;
					}

					if (dragX && snapX) {
						var dLft = mouseLeft1;
						var dRgt = plotWidCss - mouseLeft1;

						var xMin = min(dLft, dRgt);

						if (xMin == dLft)
							{ mouseLeft1 = 0; }
						if (xMin == dRgt)
							{ mouseLeft1 = plotWidCss; }
					}

					if (dragY && snapY) {
						var dTop = mouseTop1;
						var dBtm = plotHgtCss - mouseTop1;

						var yMin = min(dTop, dBtm);

						if (yMin == dTop)
							{ mouseTop1 = 0; }
						if (yMin == dBtm)
							{ mouseTop1 = plotHgtCss; }
					}

					updateCursor(1);

					dragging = false;
				}

				mouseLeft1 = -10;
				mouseTop1 = -10;

				// passing a non-null timestamp to force sync/mousemove event
				updateCursor(1);

				if (_dragging)
					{ dragging = _dragging; }
			}
		}

		function dblClick(e, src, _x, _y, _w, _h, _i) {
			autoScaleX();

			hideSelect();

			if (e != null)
				{ sync.pub(dblclick, self, mouseLeft1, mouseTop1, plotWidCss, plotHgtCss, null); }
		}

		// internal pub/sub
		var events = {};

		events[mousedown] = mouseDown;
		events[mousemove] = mouseMove;
		events[mouseup] = mouseUp;
		events[dblclick] = dblClick;
		events["setSeries"] = function (e, src, idx, opts) {
			setSeries(idx, opts);
		};

		var deb;

		if ( cursor.show) {
			on(mousedown, over, mouseDown);
			on(mousemove, over, mouseMove);
			on(mouseenter, over, syncRect);
			// this has to be rAF'd so it always fires after the last queued/rAF'd updateCursor
			on(mouseleave, over, function (e) { rAF(mouseLeave); });

			on(dblclick, over, dblClick);

			deb = debounce(syncRect, 100);

			on(resize, win, deb);
			on(scroll, win, deb);

			self.syncRect = syncRect;
		}

		// external on/off
		var hooks = self.hooks = opts.hooks || {};

		function fire(evName, a1, a2) {
			if (evName in hooks) {
				hooks[evName].forEach(function (fn) {
					fn.call(null, self, a1, a2);
				});
			}
		}

		(opts.plugins || []).forEach(function (p) {
			for (var evName in p.hooks)
				{ hooks[evName] = (hooks[evName] || []).concat(p.hooks[evName]); }
		});

		var syncOpts =  assign({
			key: null,
			setSeries: false,
			scales: [xScaleKey, null]
		}, cursor.sync);

		var syncKey =  syncOpts.key;

		var sync =  (syncKey != null ? (syncs[syncKey] = syncs[syncKey] || _sync()) : _sync());

		 sync.sub(self);

		function pub(type, src, x, y, w, h, i) {
			events[type](null, src, x, y, w, h, i);
		}

		 (self.pub = pub);

		function destroy() {
			 sync.unsub(self);
			 off(resize, win, deb);
			 off(scroll, win, deb);
			root.remove();
			fire("destroy");
		}

		self.destroy = destroy;

		function _init() {
			_setSize(opts[WIDTH], opts[HEIGHT]);

			fire("init", opts, data);

			setData(data || opts.data, false);

			if (pendScales[xScaleKey])
				{ setScale(xScaleKey, pendScales[xScaleKey]); }
			else
				{ autoScaleX(); }

			setSelect(select, false);

			ready = true;

			fire("ready");
		}

		if (then) {
			if (then instanceof HTMLElement) {
				then.appendChild(root);
				_init();
			}
			else
				{ then(self, _init); }
		}
		else
			{ _init(); }

		return self;
	}

	uPlot.assign = assign;
	uPlot.fmtNum = fmtNum;
	uPlot.rangeNum = rangeNum;
	uPlot.rangeLog = rangeLog;

	{
		uPlot.fmtDate = fmtDate;
		uPlot.tzDate  = tzDate;
	}

	return uPlot;

}());
</script>
<body onload="paintEm()">
<div id="vus.mean">Virtual Users</div>
<div id="http_reqs.sum">Requests per Second</div>
<div id="errors.count">Errors per Second</div>
<div id="Checks Per Second">Checks Per Second</div>
<br>
<span>
<div id="http_req_duration.mean"><B>Request duration (mean)</B><BR><div></div></div>
<div id="http_req_duration.max"><B>Request duration (max)</B><BR><div></div></div>
<div id="http_req_duration.median"><B>Request duration (med)</B><BR><div></div></div>
<div id="http_req_duration.min"><B>Request duration (min)</B><BR><div></div></div>
<div id="http_req_duration.p90"><B>Request duration (p90)</B><BR><div></div></div>
<div id="http_req_duration.p95"><B>Request duration (p95)</B><BR><div></div></div>
</span>
<br>
<div id="http_req_duration.4">Request duration</div>
<div id="http_req_duration">Request duration</div>
<br>
<span>
<div id="http_req_blocked.mean"><B>Waiting 4 3 TCP connection slot (mean)</B><BR><div></div></div>
<div id="http_req_blocked.max"><B>Waiting 4 3 TCP connection slot (max)</B><BR><div></div></div>
<div id="http_req_blocked.median"><B>Waiting 4 3 TCP connection slot (med)</B><BR><div></div></div>
<div id="http_req_blocked.min"><B>Waiting 4 3 TCP connection slot (min)</B><BR><div></div></div>
<div id="http_req_blocked.p90"><B>Waiting 4 3 TCP connection slot (p90)</B><BR><div></div></div>
<div id="http_req_blocked.p95"><B>Waiting 4 3 TCP connection slot (p95)</B><BR><div></div></div>
</span>
<br>
<div id="http_req_blocked.4">Waiting 4 3 TCP connection slot</div>
<div id="http_req_blocked">Waiting 4 3 TCP connection slot</div>
</body>
</html>